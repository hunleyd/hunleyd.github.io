<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
  <title> - osx</title>
  <description>Posts tagged as 'osx'</description>
  <atom:link href="http://hunleyd.github.io/feed.osx.xml" rel="self" type="application/rss+xml" />
  <link>http://hunleyd.github.io/tag/osx/</link>
  <updated>2016-12-02T16:18:49-05:00</updated>
  <author>
   <name></name>
   <email></email>
  </author>

  
   <item>
    <title>Managing multiple PostgreSQL installs via Homebrew</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://cdn.curvve.com/wp-content/uploads/2013/09/homebrew_osx_logo.png&quot; border=0 align=right style=&quot;PADDING-LEFT: 5px&quot;&gt;Following on from &lt;a href=&quot;https://hunleyd.github.io/Getting-fancy-with-PostgreSQL-and-Homebrew/&quot;&gt;this&lt;/a&gt; post, you probably have multiple versions of PostgreSQL installed on your Mac. In that post, I added an example function to help you manage all these concurrent installs. Today, I&amp;#39;m back with a full-fledged shell script to help manage all this. Without further ado, the script:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;#!/bin/sh&lt;/p&gt;

&lt;p&gt;wanted&lt;em&gt;ver=$1
no&lt;/em&gt;restart=&lt;/p&gt;

&lt;h1&gt;is the version requested installed?&lt;/h1&gt;

&lt;p&gt;brew ls --version postgresql-${wanted&lt;em&gt;ver} &amp;amp;&amp;gt;/dev/null
if [[ $? -eq 0 ]] ; then
  # yes, carry on
  :
else
  # nope, so install it
  echo -n &amp;quot;Installing PostgreSQL ${wanted&lt;/em&gt;ver}... &amp;quot;
  brew install postgresql-${wanted_ver} &amp;amp;&amp;gt;/tmp/brew.out
  if [[ $? -eq 0 ]] ; then
    echo &amp;quot;done&amp;quot;
  else
    echo &amp;quot;FAILED!&amp;quot;
    cat /tmp/brew.out
    exit
fi&lt;/p&gt;

&lt;h1&gt;is postgresql is running?&lt;/h1&gt;

&lt;p&gt;for i in /usr/local/var/postgres/*
do
  check&lt;em&gt;ver=$(basename ${i})
  is&lt;/em&gt;running=$(ps -few | egrep -- &amp;quot;[p]ostgres.&lt;em&gt;-D.&lt;/em&gt;${check_ver}&amp;quot;)&lt;/p&gt;

&lt;p&gt;if [[ -z ${is&lt;em&gt;running} ]] ; then
    # nope, carry on
    :
  else
    # it is. is it the requested version?
    if [[ &amp;quot;${wanted&lt;/em&gt;ver}&amp;quot; = &amp;quot;${check&lt;em&gt;ver}&amp;quot; ]] ; then
      # yup, carry on
      no&lt;/em&gt;restart=t
    else
      # nope, so kill it
      echo -n &amp;quot;Stopping PostgreSQL ${check&lt;em&gt;ver}... &amp;quot;
      /usr/local/opt/postgresql-${check&lt;/em&gt;ver}/bin/pg&lt;em&gt;ctl -D /usr/local/var/postgres/${check&lt;/em&gt;ver} stop -w -mf &amp;amp;&amp;gt;/tmp/stop.out
      if [[ $? -eq 0 ]] ; then
        echo &amp;quot;done!&amp;quot;
      else
        echo &amp;quot;FAILED!&amp;quot;
        cat /tmp/stop.out
      fi
    fi
  fi
done&lt;/p&gt;

&lt;h1&gt;what version is active?&lt;/h1&gt;

&lt;p&gt;active_ver=$(/usr/bin/stat -f %Y /usr/local/bin/psql | cut -d\/ -f3 | cut -d- -f2)&lt;/p&gt;

&lt;h1&gt;is the active version the requested version?&lt;/h1&gt;

&lt;p&gt;if [[ &amp;quot;${active&lt;em&gt;ver}&amp;quot; = &amp;quot;${wanted&lt;/em&gt;ver}&amp;quot; ]] ; then
  # yup, carry on
  :
else
  # nope, so deactivate it
  echo -n &amp;quot;Deactivating PostgreSQL ${active&lt;em&gt;ver}... &amp;quot;
  brew unlink --force --overwrite postgresql-${active&lt;/em&gt;ver} &amp;amp;&amp;gt;/dev/null
  echo &amp;quot;done!&amp;quot;
  # and activate the correct version
  echo -n &amp;quot;Activating PostgreSQL ${wanted&lt;em&gt;ver}... &amp;quot;
  brew link --force --overwrite postgresql-${wanted&lt;/em&gt;ver} &amp;amp;&amp;gt;/dev/null
  echo &amp;quot;done!&amp;quot;
fi&lt;/p&gt;

&lt;h1&gt;point to the correct data dir&lt;/h1&gt;

&lt;p&gt;export PGDATA=/usr/local/var/postgres/${wanted_ver}&lt;/p&gt;

&lt;h1&gt;should we be starting a cluster?&lt;/h1&gt;

&lt;p&gt;if [[ &amp;quot;${no&lt;em&gt;restart}&amp;quot; = &amp;quot;t&amp;quot; ]] ; then
  # nope, carry on
  :
else
  # yup. has the cluster been initialized?
  if [[ ! -d ${PGDATA} ]] ; then
    # nope, so let&amp;#39;s do that
    echo -n &amp;quot;Initializing PostgreSQL ${wanted&lt;/em&gt;ver} cluster... &amp;quot;
    mkdir ${PGDATA}
    initdb -k ${PGDATA} &amp;amp;&amp;gt;/dev/null || initdb ${PGDATA} &amp;amp;&amp;gt;/dev/null
    echo &amp;quot;done!&amp;quot;
  else
    # yup, carry on
    :
  fi
  # start the cluster
  echo -n &amp;quot;Starting PostgreSQL ${wanted&lt;em&gt;ver}... &amp;quot;
  pg&lt;/em&gt;ctl -D ${PGDATA} start &amp;amp;&amp;gt;/tmp/postmaster.out
  if [[ $? -eq 0 ]] ; then
    echo &amp;quot;done!&amp;quot;
  else
    echo &amp;quot;FAILED!&amp;quot;
    cat /tmp/postmaster.out
  fi
  ret=1
  while [[ ${ret} -eq 1 ]]
  do
    # wait for the cluster to be available before exiting
    pg_isready -q
    ret=$?
  done
fi&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/0ee7d8745c2f9854b34ed48ae9196362.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;But what does it do? It&amp;#39;s pretty simple actually. When you call this script, you tell it what version of PostgreSQL you want:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;doug@Douglass-MacBook-Pro ~ Â» pg 9.6
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;and then the script does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;checks if the requested version is installed, and installs it if not&lt;/li&gt;
&lt;li&gt;checks if another version of PostgreSQL is running, and stops it&lt;/li&gt;
&lt;li&gt;checks if another version is linked as the active version, and unlinks it&lt;/li&gt;
&lt;li&gt;links the requested version as the active version&lt;/li&gt;
&lt;li&gt;sets PGDATA to point to the requested version&amp;#39;s data cluster&lt;/li&gt;
&lt;li&gt;does an &lt;code&gt;initdb&lt;/code&gt; for the requested version if needed&lt;/li&gt;
&lt;li&gt;starts the requested version&amp;#39;s cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;ll be the first to admit that the script could use additional work, but it&amp;#39;s functional enough to start using today. As I continue to improve the script, I&amp;#39;ll update the gist with those changes, so check back every so often.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;
</description>
    <link>http://hunleyd.github.io/Managing-multiple-PostgreSQL-installs-via-Homebrew/ </link>
    <pubDate>2016-11-16T08:45:27-05:00</pubDate>
    <guid isPermaLink="true">http://hunleyd.github.io/Managing-multiple-PostgreSQL-installs-via-Homebrew/</guid>
   </item>
  
   <item>
    <title>Routing email through GMail on OSX</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://www.postfix.org/mysza.gif&quot; border=0 align=left style=&quot;PADDING-RIGHT: 5px&quot;&gt;Like most geeks, I have scripts that I&amp;#39;ve written that I like to have run from cron on a regular basis. And since the running of these scripts might be in the middle of the night, I like for them to email their output to me so I know if they succeeded or failed. As such, I need an MTA on my computer that can actually deliver these emails to GMail. For me, this is trivial using Sendmail or SSMTP on a Linux box, but I can never remember how to do this using Postfix on OSX. So after having to Google everything to get this running once more, I&amp;#39;m going to commit the steps here for my future self to reference :)&lt;/p&gt;

&lt;p&gt;The first thing we&amp;#39;re going to do is open an iTerm and &lt;code&gt;sudo -i&lt;/code&gt; to become root. Then we&amp;#39;re going to &lt;code&gt;vi /etc/postfix/main.cf&lt;/code&gt; and we&amp;#39;re going to add/set the following:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;myhostname = smtp.gmail.com
relayhost = [smtp.gmail.com]:587
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps= hash:/etc/postfix/sasl_passwd
smtp_sasl_security_options = noanonymous
smtp_sasl_mechanism_filter = plain
smtp_use_tls = yes
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I have Two-Factor Auth (2FA) enabled on my Google account (you should too!), so for me, the next step is to log into Google and create an &amp;#39;app password&amp;#39;. Once I have that password in hand, we &lt;code&gt;vi /etc/postfix/sasl_passwd&lt;/code&gt; and add:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;[smtp.gmail.com]:587 username@gmail.com:app_passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Secure that file by running &lt;code&gt;chmod 0600 /etc/postfix/sasl_passwd&lt;/code&gt; and then have Postfix hash it by doing &lt;code&gt;postmap /etc/postfix/sasl_passwd&lt;/code&gt;. Finally, restart Postfix:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;launchctl stop org.postfix.master
launchctl start org.postfix.master
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;And everything should work.&lt;/p&gt;
</description>
    <link>http://hunleyd.github.io/Routing-email-through-GMail-on-OSX/ </link>
    <pubDate>2016-11-15T05:51:00-05:00</pubDate>
    <guid isPermaLink="true">http://hunleyd.github.io/Routing-email-through-GMail-on-OSX/</guid>
   </item>
  
   <item>
    <title>Getting fancy with PostgreSQL and Homebrew</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://cdn.curvve.com/wp-content/uploads/2013/09/homebrew_osx_logo.png&quot; border=0 align=right style=&quot;PADDING-LEFT: 5px&quot;&gt;In our &lt;a href=&quot;https://hunleyd.github.io/PostgreSQL-Homebrew-and-You/&quot;&gt;previous&lt;/a&gt; post, we installed PostgreSQL via Homebrew and got our own little cluster up and running under our userid. That is probably good enough for 90% of the users out there who just want to play with or devel on PostgreSQL, but for those of us who need a little more flexibility in our installs, we&amp;#39;re going to take the next step.&lt;/p&gt;

&lt;p&gt;First, if you have any data in your existing cluster that you want to preserve, let&amp;#39;s backup it up. We&amp;#39;re just going to use &lt;code&gt;pg_dumpall&lt;/code&gt; here since it&amp;#39;s quick-n-dirty:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;bash
doug@Douglass-MacBook-Pro ~ Â»
doug@Douglass-MacBook-Pro ~ Â» pg_dumpall -g &amp;amp;gt; my_roles.sql
doug@Douglass-MacBook-Pro ~ Â» pg_dumpall &amp;amp;gt; my_data.sql
doug@Douglass-MacBook-Pro ~ Â»
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/22e765b45c877b5c9c2e35722b464393.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now, we can stop our cluster:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;bash
doug@Douglass-MacBook-Pro ~ Â»
doug@Douglass-MacBook-Pro ~ Â» brew services stop postgresql
Stopping `postgresql`... (might take a while)
==&amp;amp;gt; Successfully stopped `postgresql` (label: homebrew.mxcl.postgresql)
doug@Douglass-MacBook-Pro ~ Â»
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/f02a36a115c3fed3310e7abc5f3fb419.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And uninstall the current PostgreSQL:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;bash
doug@Douglass-MacBook-Pro ~ Â»
doug@Douglass-MacBook-Pro ~ Â» brew uninstall postgresql
Uninstalling /usr/local/Cellar/postgresql/9.5.5... (3,154 files, 35.1M)
doug@Douglass-MacBook-Pro ~ Â»
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/4dffee8e9ebbf2c052162f2ecc36e812.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And remove the remnants of our cluster:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;bash
doug@Douglass-MacBook-Pro ~ Â»
doug@Douglass-MacBook-Pro ~ Â» rm -rf /usr/local/var/postgres
doug@Douglass-MacBook-Pro ~ Â»
&lt;/code&gt;
&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/7c064e25c8916fa7fe0e3cdb846d3c78.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;ve got a clean slate. So, let&amp;#39;s tell Homebrew to stop using the default PostgreSQL and use Peter Eisentraut&amp;#39;s version (if you don&amp;#39;t know, Peter actually contributes to PostgreSQL):&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;```bash
doug@Douglass-MacBook-Pro ~ Â» 
doug@Douglass-MacBook-Pro ~ Â» brew tap petere/postgresql
Updating Homebrew...
==&amp;gt; Auto-updated Homebrew!
Updated 1 tap (homebrew/core).
==&amp;gt; New Formulae
[snip]
==&amp;gt; Updated Formulae
[snip]
==&amp;gt; Deleted Formulae
[snip]&lt;/p&gt;

&lt;p&gt;==&amp;gt; Tapping petere/postgresql
Cloning into &amp;#39;/usr/local/Homebrew/Library/Taps/petere/homebrew-postgresql&amp;#39;...
remote: Counting objects: 15, done.
remote: Compressing objects: 100% (11/11), done.
remote: Total 15 (delta 9), reused 5 (delta 4), pack-reused 0
Unpacking objects: 100% (15/15), done.
Checking connectivity... done.
Tapped 11 formulae (49 files, 71.7K)
doug@Douglass-MacBook-Pro ~ Â» 
```&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/b099ff10c1cd1713f37ff40cf320adf3.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As of this writing, Peter makes PostgreSQL 8.3 and above available. However, only PostgreSQL 9.2 and above are officially supported by the PostgreSQL community. So let&amp;#39;s install the supported versions:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;```bash
doug@Douglass-MacBook-Pro ~ Â»
doug@Douglass-MacBook-Pro ~ Â» for i in $(seq 2 6)
\ do
\ brew install postgresql-9.${i}
\ done
==&amp;gt; Installing postgresql-9.2 from petere/postgresql
==&amp;gt; Tapping homebrew/dupes
Cloning into &amp;#39;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-dupes&amp;#39;...
remote: Counting objects: 42, done.
remote: Compressing objects: 100% (42/42), done.
remote: Total 42 (delta 0), reused 4 (delta 0), pack-reused 0
Unpacking objects: 100% (42/42), done.
Checking connectivity... done.
Tapped 38 formulae (103 files, 121.4K)
==&amp;gt; Installing dependencies for petere/postgresql/postgresql-9.2: gettext, homebrew/dupes/openldap, ossp-uuid, homebrew/dupes/tcl-tk
==&amp;gt; Installing petere/postgresql/postgresql-9.2 dependency: get
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/gettext-0.19.8.1.sierra.bot&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; Pouring gettext-0.19.8.1.sierra.bottle.tar.gz
==&amp;gt; Caveats
This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;macOS provides the BSD gettext library and some software gets confused if both are in the library path.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/gettext/lib
CPPFLAGS: -I/usr/local/opt/gettext/include
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/gettext/0.19.8.1: 1,934 files, 16.9M
==&amp;gt; Installing petere/postgresql/postgresql-9.2 dependency: homebrew/dupes/
==&amp;gt; Downloading https://homebrew.bintray.com/bottles-dupes/openldap-2.4.44.sierr&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; Pouring openldap-2.4.44.sierra.bottle.tar.gz
==&amp;gt; Caveats
This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/openldap/lib
CPPFLAGS: -I/usr/local/opt/openldap/include
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/openldap/2.4.44: 295 files, 6.3M
==&amp;gt; Installing petere/postgresql/postgresql-9.2 dependency: ossp-uuid
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/ossp-uuid-1.6.2_2.sierra.bo&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; Pouring ossp-uuid-1.6.2&lt;em&gt;2.sierra.bottle.tar.gz
ðº   /usr/local/Cellar/ossp-uuid/1.6.2&lt;/em&gt;2: 17 files, 206K
==&amp;gt; Installing petere/postgresql/postgresql-9.2 dependency: homebrew/dupes/
==&amp;gt; Using the sandbox
==&amp;gt; Downloading https://downloads.sourceforge.net/project/tcl/Tcl/8.6.6/tcl8.6.6
==&amp;gt; Downloading from http://iweb.dl.sourceforge.net/project/tcl/Tcl/8.6.6/tcl8.6&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; ./configure --prefix=/usr/local/Cellar/tcl-tk/8.6.6 --mandir=/usr/local/Cell
==&amp;gt; make
==&amp;gt; make install
==&amp;gt; make install-private-headers
==&amp;gt; Downloading https://downloads.sourceforge.net/project/tcl/Tcl/8.6.6/tk8.6.6-
==&amp;gt; Downloading from http://heanet.dl.sourceforge.net/project/tcl/Tcl/8.6.6/tk8.&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; ./configure --prefix=/usr/local/Cellar/tcl-tk/8.6.6 --mandir=/usr/local/Cell
==&amp;gt; make TK&lt;em&gt;LIBRARY=/usr/local/Cellar/tcl-tk/8.6.6/lib
==&amp;gt; make install
==&amp;gt; make install-private-headers
==&amp;gt; Downloading https://github.com/tcltk/tcllib/archive/tcllib&lt;/em&gt;1&lt;em&gt;18.tar.gz
==&amp;gt; Downloading from https://codeload.github.com/tcltk/tcllib/tar.gz/tcllib&lt;/em&gt;1_18&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; ./configure --prefix=/usr/local/Cellar/tcl-tk/8.6.6 --mandir=/usr/local/Cell
==&amp;gt; make install
==&amp;gt; Caveats
This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;Tk installs some X11 headers and OS X provides an (older) Tcl/Tk.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/tcl-tk/lib
CPPFLAGS: -I/usr/local/opt/tcl-tk/include
PKG_CONFIG_PATH: /usr/local/opt/tcl-tk/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/tcl-tk/8.6.6: 2,847 files, 29.2M, built in 5 minutes 31 seconds
==&amp;gt; Installing petere/postgresql/postgresql-9.2
==&amp;gt; Downloading https://ftp.postgresql.org/pub/source/v9.2.19/postgresql-9.2.19.&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; Patching
patching file contrib/uuid-ossp/uuid-ossp.c
==&amp;gt; ./configure --prefix=/usr/local/Cellar/postgresql-9.2/9.2.19 --enable-dtrace
==&amp;gt; make install-world
==&amp;gt; Caveats
To use this PostgreSQL installation, do one or more of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call all programs explicitly with /usr/local/opt/postgresql-9.2/bin/...&lt;/li&gt;
&lt;li&gt;Add /usr/local/opt/postgresql-9.2/bin to your PATH&lt;/li&gt;
&lt;li&gt;brew link -f postgresql-9.2&lt;/li&gt;
&lt;li&gt;Install the postgresql-common package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access the man pages, do one or more of the following:
- Refer to them by their full path, like &lt;code&gt;man /usr/local/opt/postgresql-9.2/share/man/man1/psql.1&lt;/code&gt;
- Add /usr/local/opt/postgresql-9.2/share/man to your MANPATH
- brew link -f postgresql-9.2&lt;/p&gt;

&lt;p&gt;This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;The different provided versions of PostgreSQL conflict with each other.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/postgresql-9.2/lib
CPPFLAGS: -I/usr/local/opt/postgresql-9.2/include
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/postgresql-9.2/9.2.19: 3,120 files, 40M, built in 3 minutes 28 seconds
Updating Homebrew...
==&amp;gt; Auto-updated Homebrew!
Updated 1 tap (homebrew/core).
==&amp;gt; Updated Formulae
[snip]&lt;/p&gt;

&lt;p&gt;==&amp;gt; Installing postgresql-9.3 from petere/postgresql
==&amp;gt; Downloading https://ftp.postgresql.org/pub/source/v9.3.15/postgresql-9.3.15.&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; Patching
patching file contrib/uuid-ossp/uuid-ossp.c
==&amp;gt; ./configure --prefix=/usr/local/Cellar/postgresql-9.3/9.3.15 --enable-dtrace
==&amp;gt; make install-world
==&amp;gt; Caveats
To use this PostgreSQL installation, do one or more of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call all programs explicitly with /usr/local/opt/postgresql-9.3/bin/...&lt;/li&gt;
&lt;li&gt;Add /usr/local/opt/postgresql-9.3/bin to your PATH&lt;/li&gt;
&lt;li&gt;brew link -f postgresql-9.3&lt;/li&gt;
&lt;li&gt;Install the postgresql-common package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access the man pages, do one or more of the following:
- Refer to them by their full path, like &lt;code&gt;man /usr/local/opt/postgresql-9.3/share/man/man1/psql.1&lt;/code&gt;
- Add /usr/local/opt/postgresql-9.3/share/man to your MANPATH
- brew link -f postgresql-9.3&lt;/p&gt;

&lt;p&gt;This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;The different provided versions of PostgreSQL conflict with each other.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/postgresql-9.3/lib
CPPFLAGS: -I/usr/local/opt/postgresql-9.3/include
PKG_CONFIG_PATH: /usr/local/opt/postgresql-9.3/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/postgresql-9.3/9.3.15: 3,190 files, 41M, built in 3 minutes 17 seconds
==&amp;gt; Installing postgresql-9.4 from petere/postgresql
==&amp;gt; Installing dependencies for petere/postgresql/postgresql-9.4: e2fsprogs
==&amp;gt; Installing petere/postgresql/postgresql-9.4 dependency: e2fsprogs
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/e2fsprogs-1.42.13.sierra.bo&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; Pouring e2fsprogs-1.42.13.sierra.bottle.tar.gz
==&amp;gt; Caveats
This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;This brew installs several commands which override macOS-provided file system commands.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/e2fsprogs/lib
CPPFLAGS: -I/usr/local/opt/e2fsprogs/include
PKG_CONFIG_PATH: /usr/local/opt/e2fsprogs/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/e2fsprogs/1.42.13: 135 files, 5.0M
==&amp;gt; Installing petere/postgresql/postgresql-9.4
==&amp;gt; Downloading https://ftp.postgresql.org/pub/source/v9.4.10/postgresql-9.4.10.&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; ./configure --prefix=/usr/local/Cellar/postgresql-9.4/9.4.10 --enable-dtrace
==&amp;gt; make install-world
==&amp;gt; Caveats
To use this PostgreSQL installation, do one or more of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call all programs explicitly with /usr/local/opt/postgresql-9.4/bin/...&lt;/li&gt;
&lt;li&gt;Add /usr/local/opt/postgresql-9.4/bin to your PATH&lt;/li&gt;
&lt;li&gt;brew link -f postgresql-9.4&lt;/li&gt;
&lt;li&gt;Install the postgresql-common package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access the man pages, do one or more of the following:
- Refer to them by their full path, like &lt;code&gt;man /usr/local/opt/postgresql-9.4/share/man/man1/psql.1&lt;/code&gt;
- Add /usr/local/opt/postgresql-9.4/share/man to your MANPATH
- brew link -f postgresql-9.4&lt;/p&gt;

&lt;p&gt;This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;The different provided versions of PostgreSQL conflict with each other.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/postgresql-9.4/lib
CPPFLAGS: -I/usr/local/opt/postgresql-9.4/include
PKG_CONFIG_PATH: /usr/local/opt/postgresql-9.4/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/postgresql-9.4/9.4.10: 3,261 files, 42.9M, built in 3 minutes 17 seconds
==&amp;gt; Installing postgresql-9.5 from petere/postgresql
==&amp;gt; Downloading https://ftp.postgresql.org/pub/source/v9.5.5/postgresql-9.5.5.ta&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; ./configure --prefix=/usr/local/Cellar/postgresql-9.5/9.5.5 --enable-dtrace
==&amp;gt; make install-world
==&amp;gt; Caveats
To use this PostgreSQL installation, do one or more of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call all programs explicitly with /usr/local/opt/postgresql-9.5/bin/...&lt;/li&gt;
&lt;li&gt;Add /usr/local/opt/postgresql-9.5/bin to your PATH&lt;/li&gt;
&lt;li&gt;brew link -f postgresql-9.5&lt;/li&gt;
&lt;li&gt;Install the postgresql-common package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access the man pages, do one or more of the following:
- Refer to them by their full path, like &lt;code&gt;man /usr/local/opt/postgresql-9.5/share/man/man1/psql.1&lt;/code&gt;
- Add /usr/local/opt/postgresql-9.5/share/man to your MANPATH
- brew link -f postgresql-9.5&lt;/p&gt;

&lt;p&gt;This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;The different provided versions of PostgreSQL conflict with each other.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/postgresql-9.5/lib
CPPFLAGS: -I/usr/local/opt/postgresql-9.5/include
PKG_CONFIG_PATH: /usr/local/opt/postgresql-9.5/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/postgresql-9.5/9.5.5: 3,395 files, 45M, built in 3 minutes 30 seconds
==&amp;gt; Installing postgresql-9.6 from petere/postgresql
==&amp;gt; Downloading https://ftp.postgresql.org/pub/source/v9.6.1/postgresql-9.6.1.ta&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; ./configure --prefix=/usr/local/Cellar/postgresql-9.6/9.6.1 --enable-dtrace
==&amp;gt; make install-world
==&amp;gt; Caveats
To use this PostgreSQL installation, do one or more of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call all programs explicitly with /usr/local/opt/postgresql-9.6/bin/...&lt;/li&gt;
&lt;li&gt;Add /usr/local/opt/postgresql-9.6/bin to your PATH&lt;/li&gt;
&lt;li&gt;brew link -f postgresql-9.6&lt;/li&gt;
&lt;li&gt;Install the postgresql-common package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access the man pages, do one or more of the following:
- Refer to them by their full path, like &lt;code&gt;man /usr/local/opt/postgresql-9.6/share/man/man1/psql.1&lt;/code&gt;
- Add /usr/local/opt/postgresql-9.6/share/man to your MANPATH
- brew link -f postgresql-9.6&lt;/p&gt;

&lt;p&gt;This formula is keg-only, which means it was not symlinked into /usr/local.&lt;/p&gt;

&lt;p&gt;The different provided versions of PostgreSQL conflict with each other.&lt;/p&gt;

&lt;p&gt;Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you will need to add to your
build variables:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LDFLAGS:  -L/usr/local/opt/postgresql-9.6/lib
CPPFLAGS: -I/usr/local/opt/postgresql-9.6/include
PKG_CONFIG_PATH: /usr/local/opt/postgresql-9.6/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;==&amp;gt; Summary
ðº   /usr/local/Cellar/postgresql-9.6/9.6.1: 3,485 files, 46.6M, built in 3 minutes 38 seconds
doug@Douglass-MacBook-Pro ~ Â»
```&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/bcc4e0e7c55e849b7adb647d9727674c.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As it says in the output, these are &amp;#39;keg-only&amp;#39;, which has the nice side effect that they are automatically installed in side-by-side directories &lt;code&gt;/usr/local/opt/postgresql-9.1/&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;Peter configures PostgreSQL with just about all the options turned on:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;```bash
doug@Douglass-MacBook-Pro ~ Â»
oug@Douglass-MacBook-Pro ~ Â» pg_config |grep ^CONF
CONFIGURE = &amp;#39;--prefix=/usr/local/Cellar/postgresql-9.6/9.6.1&amp;#39; &amp;#39;--enable-dtrace&amp;#39; &amp;#39;--enable-nls&amp;#39; &amp;#39;--with-bonjour&amp;#39; &amp;#39;--with-gssapi&amp;#39; &amp;#39;--with-ldap&amp;#39; &amp;#39;--with-libxml&amp;#39; &amp;#39;--with-libxslt&amp;#39; &amp;#39;--with-openssl&amp;#39; &amp;#39;--with-uuid=e2fs&amp;#39; &amp;#39;--with-pam&amp;#39; &amp;#39;--with-perl&amp;#39; &amp;#39;--with-python&amp;#39; &amp;#39;--with-tcl&amp;#39; &amp;#39;--with-includes=/usr/local/opt/gettext/include:/usr/local/opt/openldap/include:/usr/local/opt/openssl/include:/usr/local/opt/readline/include:/usr/local/opt/tcl-tk/include&amp;#39; &amp;#39;--with-libraries=/usr/local/opt/gettext/lib:/usr/local/opt/openldap/lib:/usr/local/opt/openssl/lib:/usr/local/opt/readline/lib:/usr/local/opt/tcl-tk/lib&amp;#39; &amp;#39;CC=clang&amp;#39;
doug@Douglass-MacBook-Pro ~ Â»&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/c56727a3249042841c2609439209c8fd.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and you get all the extensions that are in &amp;#39;contrib&amp;#39; as well. However, if you find that you need to install another extension, I advocate using &lt;code&gt;pex&lt;/code&gt;. You would install it like this:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;```bash
doug@Douglass-MacBook-Pro ~ Â» brew install pex
==&amp;gt; Installing dependencies for pex: postgresql
==&amp;gt; Installing pex dependency: postgresql
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/postgresql-9.5.5.sierra.bot
Already downloaded: /Users/doug/Library/Caches/Homebrew/postgresql-9.5.5.sierra.bottle.tar.gz
==&amp;gt; Pouring postgresql-9.5.5.sierra.bottle.tar.gz
==&amp;gt; Using the sandbox
==&amp;gt; /usr/local/Cellar/postgresql/9.5.5/bin/initdb /usr/local/var/postgres
==&amp;gt; Caveats
If builds of PostgreSQL 9 are failing and you have version 8.x installed,
you may need to remove the previous version first. See:
  https://github.com/Homebrew/homebrew/issues/2510&lt;/p&gt;

&lt;p&gt;To migrate existing data from a previous major version (pre-9.0) of PostgreSQL, see:
  https://www.postgresql.org/docs/9.5/static/upgrading.html&lt;/p&gt;

&lt;p&gt;To migrate existing data from a previous minor version (9.0-9.4) of PostgreSQL, see:
  https://www.postgresql.org/docs/9.5/static/pgupgrade.html&lt;/p&gt;

&lt;p&gt;You will need your previous PostgreSQL installation from brew to perform &lt;code&gt;pg_upgrade&lt;/code&gt;.
   Do not run &lt;code&gt;brew cleanup postgresql&lt;/code&gt; until you have performed the migration.                                                                  1
To have launchd start postgresql now and restart at login:
  brew services start postgresql
Or, if you do not want/need a background service you can just run:
  pg_ctl -D /usr/local/var/postgres start
==&amp;gt; Summary
ðº   /usr/local/Cellar/postgresql/9.5.5: 3,154 files, 35.1M
==&amp;gt; Installing pex
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/pex-1.20140409.sierra.bottl&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; Pouring pex-1.20140409.sierra.bottle.tar.gz
==&amp;gt; Caveats
If installing for the first time, perform the following in order to setup the necessary directory structure:
  pex init
==&amp;gt; Summary
ðº   /usr/local/Cellar/pex/1.20140409: 5 files, 31.6K
doug@Douglass-MacBook-Pro ~ Â»
doug@Douglass-MacBook-Pro ~ Â» pex init
doug@Douglass-MacBook-Pro ~ Â»
```&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/37c2e01a0d400c0a16c7fb7d9b8d1030.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Sadly, it will reinstall the default PostgreSQL brew recipe, but we&amp;#39;ll simply pretend that it&amp;#39;s not there going forward. Once installed, use &lt;code&gt;pex&lt;/code&gt; like so:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;```bash
doug@Douglass-MacBook-Pro ~ Â» pex -g /usr/local/opt/postgresql-9.4 install ip4r
==&amp;gt; Downloading ip4r from https://github.com/RhodiumToad/ip4r/archive/2.0.3.tar.gz&lt;/p&gt;

&lt;h6&gt;################################################################## 100.0%&lt;/h6&gt;

&lt;p&gt;==&amp;gt; Unpacking ip4r
[snip]
==&amp;gt; Building ip4r
[snip]
==&amp;gt; Installing ip4r
[snip]
/usr/bin/install -c -m 755  ip4r.so &amp;#39;/usr/local/Cellar/postgresql-9.4/9.4.10/lib/ip4r.so&amp;#39;
/usr/bin/install -c -m 644 ip4r.control &amp;#39;/usr/local/Cellar/postgresql-9.4/9.4.10/share/extension/&amp;#39;
/usr/bin/install -c -m 644 ip4r--2.0.sql ip4r--unpackaged2.0--2.0.sql ip4r--unpackaged1--2.0.sql                                                  âª\  &amp;#39;/usr/local/Cellar/postgresql-9.4/9.4.10/share/extension/&amp;#39;
[snip]
==&amp;gt; Package ip4r installed successfully
doug@Douglass-MacBook-Pro ~ Â»
```&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/d2d004871557adc49ae77b19181bd999.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;ip4r&lt;/code&gt; extension was installed into my PostgreSQL 9.4 instance.&lt;/p&gt;

&lt;p&gt;Now, you might be wondering how to deal with all these concurrent versions. If you type &lt;code&gt;pg_dump&lt;/code&gt; which one willl you get? How can you force it to use a specific version? Right now, you won&amp;#39;t get any version, since it&amp;#39;s not in your path. You will need to specify exactly what you want:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;doug@Douglass-MacBook-Pro ~ Â» /usr/local/opt/postgresql-9.6/bin/psql --version
psql (PostgreSQL) 9.6.1
doug@Douglass-MacBook-Pro ~ Â»
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;which is a huge pita. So, let&amp;#39;s make a little convenience function in our shell. Edit your &lt;code&gt;.zshrc&lt;/code&gt; or your &lt;code&gt;.bashrc&lt;/code&gt; (or whatever) and add a function like this:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;```bash
    function pg()
    {
      ver=$1&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  for i in /usr/local/var/postgres/*
  do
    running_ver=$(basename ${i})
    is_running=$(ps -few|egrep -- &amp;amp;quot;[p]ostgres.*-D.*${running_ver}&amp;amp;quot;)
    if [[ ! -z ${is_running} ]] ; then
      echo -n &amp;amp;quot;Stopping PostgreSQL ${running_ver}... &amp;amp;quot;
      /usr/local/opt/postgresql-${running_ver}/bin/pg_ctl \
        -D $i stop -mf &amp;amp;amp;&amp;amp;gt;/dev/null
      echo &amp;amp;quot;done!&amp;amp;quot;
    fi
  done

  echo -n &amp;amp;quot;Activating PostgreSQL ${ver}... &amp;amp;quot;
  brew unlink --force --overwrite postgresql-${ver} &amp;amp;amp;&amp;amp;gt;/dev/null
  brew link --force --overwrite postgresql-${ver} &amp;amp;amp;&amp;amp;gt;/dev/null
  echo &amp;amp;quot;done!&amp;amp;quot;

  export PGDATA=/usr/local/var/postgres/${ver}

  if [[ ! -d ${PGDATA} ]] ; then
    echo -n &amp;amp;quot;Initializing PostgreSQL ${ver} cluster... &amp;amp;quot;
    mkdir ${PGDATA}
    initdb -k ${PGDATA} &amp;amp;amp;&amp;amp;gt;/dev/null || initdb ${PGDATA} &amp;amp;amp;&amp;amp;gt;/dev/null
    echo &amp;amp;quot;done!&amp;amp;quot;
  fi
  echo -n &amp;amp;quot;Starting PostgreSQL ${ver}... &amp;amp;quot;
  pg_ctl -D ${PGDATA} start &amp;amp;amp;&amp;amp;gt;/dev/null
  echo &amp;amp;quot;done!&amp;amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;```&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/b27085662bea30f3b39de293a038b766.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and then simply call &lt;code&gt;pg 9.5&lt;/code&gt; to set PostgreSQL 9.5 as your &amp;#39;active&amp;#39; instance:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oug@Douglass-MacBook-Pro ~ Â» pg 9.5
Stopping PostgreSQL 9.4... done!
Activating PostgreSQL 9.5... done!
Initializing PostgreSQL 9.5 cluster... done!
Starting PostgreSQL 9.5... done!
doug@Douglass-MacBook-Pro ~ Â»
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Restore your data:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;404: Not Found
&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/ihunleyd/a54dab54b0b44b7e9fd05ca54cf5fb95.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and there you be. Ain&amp;#39;t it beautiful? :)&lt;/p&gt;
</description>
    <link>http://hunleyd.github.io/Getting-fancy-with-PostgreSQL-and-Homebrew/ </link>
    <pubDate>2016-11-10T09:58:15-05:00</pubDate>
    <guid isPermaLink="true">http://hunleyd.github.io/Getting-fancy-with-PostgreSQL-and-Homebrew/</guid>
   </item>
  
   <item>
    <title>PostgreSQL, Homebrew, and You</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://cdn.curvve.com/wp-content/uploads/2013/09/homebrew_osx_logo.png&quot; border=0 align=left style=&quot;PADDING-RIGHT: 5px&quot;&gt;If you need to install &lt;a href=&quot;http://www.posatgresql.org&quot;&gt;PostgreSQL&lt;/a&gt; onto your Macbook, you have several options available to you nowadays. You could use the &lt;a href=&quot;https://bigsql.com/postgresql/installers.jsp&quot;&gt;BigSQL&lt;/a&gt; package, or you could use &lt;a href=&quot;http://postgresapp.com&quot;&gt;Postgres.app&lt;/a&gt;, or several others. However, if you&amp;#39;re a geek running OSX, you&amp;#39;ve probably already installed &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt; and it has a wonderful PostgreSQL package. So let&amp;#39;s use it, shall we?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not going to walk you through installing Homebrew, so let&amp;#39;s just assume it&amp;#39;s already up and running and you&amp;#39;ve followed all the directions. At this point, you have &lt;code&gt;/usr/local/bin/&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;brew&lt;/code&gt; is up and running. So, let&amp;#39;s tell &lt;code&gt;brew&lt;/code&gt; to install PostgreSQL:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;doug@Douglass-MacBook-Pro ~ Â» brew install postgresql
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/postgresql-9.5.4_1.sierra.b
Already downloaded: /Users/doug/Library/Caches/Homebrew/postgresql-9.5.4_1.sierra.bottle.tar.gz
==&amp;gt; Pouring postgresql-9.5.4_1.sierra.bottle.tar.gz
==&amp;gt; Using the sandbox
==&amp;gt; /usr/local/Cellar/postgresql/9.5.4_1/bigsqln/initdb /usr/local/var/postgres
==&amp;gt; Caveats
If builds of PostgreSQL 9 are failing and you have version 8.x installed,
you may need to remove the previous version first. See:
  https://github.com/Homebrew/homebrew/issues/2510

To migrate existing data from a previous major version (pre-9.0) of PostgreSQL, see:
  https://www.postgresql.org/docs/9.5/static/upgrading.html

To migrate existing data from a previous minor versionn (9.0-9.4) of PostgreSQL, see:
  https://www.postgresql.org/docs/9.5/static/pgupgrade.html

  You will need your previous PostgreSQL installation from brew to perform `pg_upgrade`.
  Do not run `brew cleanup postgresql` until you have performed the migration.

To have launchd start postgresql now and restart at login:
  brew services start postgresql
Or, if you don&amp;#39;t want/need a background service you can just run:
  pg_ctl -D /usr/local/var/postgres start
==&amp;gt; Summary
ðº  /usr/local/Cellar/postgresql/9.5.4_1: 3,147 files, 35M
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;As you can see, it downloaded the package, installed the binaries, and ran &lt;code&gt;initdb&lt;/code&gt; for us! As the output tells us, we can set PostgreSQL to auto-start when we login by issuing:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;doug@Douglass-MacBook-Pro ~ Â» brew services start postgresql
==&amp;gt; Successfully started `postgresql` (label: homebrew.mxcl.postgresql)
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;And if you check your process listing, you can see that the cluster is up and running under your id:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;doug@Douglass-MacBook-Pro ~ Â» ps -efw|grep postgres
  501  6808     1   0 11:03AM ??         0:00.02 /usr/local/opt/postgresql/bin/postgres -D /usr/local/var/postgres
  501  6817  6808   0 11:03AM ??         0:00.00 postgres: logger process
  501  6819  6808   0 11:03AM ??         0:00.00 postgres: checkpointer process
  501  6820  6808   0 11:03AM ??         0:00.00 postgres: writer process
  501  6821  6808   0 11:03AM ??         0:00.00 postgres: wal writer process
  501  6822  6808   0 11:03AM ??         0:00.00 postgres: autovacuum launcher process
  501  6823  6808   0 11:03AM ??         0:00.00 postgres: stats collector process
doug@Douglass-MacBook-Pro ~ Â»
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;And just like that, you have PostgreSQL installed and running! Set &lt;code&gt;$PGDATA&lt;/code&gt; to &lt;code&gt;/usr/local/var/postgres&lt;/code&gt; and you&amp;#39;re all set.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    <link>http://hunleyd.github.io/PostgreSQL-Homebrew-and-You/ </link>
    <pubDate>2016-11-04T09:30:09-04:00</pubDate>
    <guid isPermaLink="true">http://hunleyd.github.io/PostgreSQL-Homebrew-and-You/</guid>
   </item>
  
   <item>
    <title>Glutton for Punishment</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://www.theshell.guru/wp-content/uploads/2015/12/osx-logo3.png&quot; border=0 align=right&gt;I recently got a new Macbook Pro from work as my old one was having keyboard issues and since it was 3+ yrs old they deemed it not worth fixing. As you probably know, I spent a lot of time and effort on the previous mbp to get &lt;a href=&quot;http://www.gentoo.org&quot;&gt;Gentoo&lt;/a&gt; up and running on it. I chose &lt;em&gt;not&lt;/em&gt; to do so with this one.&lt;/p&gt;

&lt;p&gt;While I have looked into it and believe that I could get Gentoo up and running fairly easily, I&amp;#39;ve decided to skip it for now and try to live with OSX. I travel for work and never know what I&amp;#39;m going to be asked to do when onsite. Sometimes I have to present things on a projector while other times the customer only has 5Ghz wifi available. And thanks to the proprietary nature of these machines, these features are either non-functional or sub-optimal under Linux. I&amp;#39;m also getting tired of our IT staff telling me Linux isn&amp;#39;t supported whenever I have an issue, even if that issue clearly doesn&amp;#39;t have anything to do with the OS. And several other minor annoyances that have added up over my three yrs tenure here.&lt;/p&gt;

&lt;p&gt;So, yeah. I&amp;#39;ve decided to sign up for the pain of staying in OSX. So far, I think I&amp;#39;ve managed to coerce the system into a &amp;#39;feel-alike&amp;#39; of my prior KDE 5 Plasma environment but it&amp;#39;s taken a lot of tweaking and Googling and setting of magic CLI commands to get OSX to do my bidding. And I&amp;#39;ve had to buy more than a few apps to get functionality that I got for free on Linux, which chaps my ass.&lt;/p&gt;

&lt;p&gt;So we&amp;#39;ll see how this lasts. Or doesn&amp;#39;t.&lt;/p&gt;
</description>
    <link>http://hunleyd.github.io/Glutton-for-punishment/ </link>
    <pubDate>2016-02-29T05:14:50-05:00</pubDate>
    <guid isPermaLink="true">http://hunleyd.github.io/Glutton-for-punishment/</guid>
   </item>
  
 </channel>
</rss>
