<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
  <title>Douglas J Hunley</title>
  <description>Doug's various musings</description>
  <atom:link href="/feeds/feed.xml" rel="self" type="application/rss+xml" />
  <link></link>
  <updated>2017-02-16T08:45:37-05:00</updated>
  <author>
   <name></name>
   <email></email>
  </author>

  
   <item>
    <title>Goodbye, Loui boy</title>
    <description>&lt;p&gt;&lt;img src=&quot;/images/loui.jpg&quot; class=&quot;rleader&quot; /&gt;Thank you, Loui, for bringing so much joy and happiness to our lives these past ten years. &lt;em&gt;I will miss you.&lt;/em&gt;&lt;/p&gt;

</description>
    <pubDate>2017-02-16T03:35:19-05:00</pubDate>
    <link>/posts/Goodbye-Loui-boy/</link>
    <guid isPermaLink="true">/posts/Goodbye-Loui-boy/</guid>
    
     <category>general</category>
    
   </item>
  
   <item>
    <title>New look, same content</title>
    <description>&lt;p&gt;UPDATE: I’ve switched out the theme entirely (again) so the CSS issues should no longer be present. The rest of this post still sands.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lleader&quot; src=&quot;http://www.awesome-t-shirts.com/img/T-shirts/you-look-different-not-better-just-different.jpg&quot; /&gt;As you’ve probably noticed, I’ve launched the new blog design. Everything that was here should still be here, but it might have moved. Sorry, but I broke the old permalinks. Bad blogger! However, I now have everything &lt;em&gt;exactly&lt;/em&gt; where I want it, so it shouldn’t ever change again. Famous last words, right there :)&lt;/p&gt;

&lt;p&gt;So anyway, let me know if you find issues w/ the site. I’m aware of some small CSS fuckery here and there, but I got tired of beating my head against it honestly. If anyone wants to tell me what’s wrong with it and how to fix it, I’ll buy you a virtual beer. If you want to let your opinion known about the new design (nice! it sucks! meh.) feel free to hit me up too. If enough people kvetch, I’ll tweak it.&lt;/p&gt;

&lt;p&gt;Enjoy or something.&lt;/p&gt;
</description>
    <pubDate>2017-01-17T09:26:51-05:00</pubDate>
    <link>/posts/New-look-same-content/</link>
    <guid isPermaLink="true">/posts/New-look-same-content/</guid>
    
     <category>blog</category>
    
   </item>
  
   <item>
    <title>Changes to the blog</title>
    <description>&lt;p&gt;&lt;img class=&quot;rleader&quot; src=&quot;http://www.cafecowboys.com/wp-content/uploads/2016/04/blogging-inside.gif&quot; /&gt;In case you haven’t already noticed, I’ve made some changes to my blog recently. Nothing really significant or drastic, but things that have been on the TODO list for a while.&lt;/p&gt;

&lt;p&gt;I guess the most obvious change would be that I added pagination finally. If you scroll the homepage all the way down, instead of it going back through the entire blog’s history, it stops after five posts, and then gives a clickable page counter. Once I had this implemented, I then had to un-paginate the archive pages which was interesting.&lt;/p&gt;

&lt;p&gt;The next most visible change would probably be the change I made to the CSS concerning CODE and CODEBLOCK. I’m still not 100% sure this is the final form, but I like it better than it was. For reference, it now looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My third change was to tweak the site’s header a bit. If you cast your gaze upwards, you can see that I now have ‘About’, ‘Archive’, and ‘Feeds’ in the header. The ‘Feeds’ link is new, as is the page that it links to. The actual RSS feeds themselves have existed for a while now, I just didn’t announce them.&lt;/p&gt;

&lt;p&gt;And finally, I swapped out my photo for my new Bitmoji-based avatar.&lt;/p&gt;

&lt;p&gt;So, uh, enjoy. Or something.&lt;/p&gt;
</description>
    <pubDate>2016-12-02T08:48:42-05:00</pubDate>
    <link>/posts/changes-to-the-blog/</link>
    <guid isPermaLink="true">/posts/changes-to-the-blog/</guid>
    
     <category>general</category>
    
     <category>blog</category>
    
   </item>
  
   <item>
    <title>EXPLAINing intermittent perf problems</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://i0.kym-cdn.com/entries/icons/original/000/010/997/35s7cv.jpg&quot; class=&quot;lleader&quot; /&gt;We’ve all gotten the dreaded email/call from a user stating that a query is “slow sometimes”. If you’re lucky, the “sometimes” actually ends up being fairly consistent and you can fairly easily determine what’s happening (an errant cron job, for example). All too often though, the issue really is sporadic, fleeting, and indeterministic. So how do you track these down? And more importantly what do you do about them once found?&lt;/p&gt;

&lt;p&gt;For starters, you as the DBA should have your PostgreSQL logging configured to log these slow performing queries. After all, you and the devs and the users can agree that all queries should complete in some measure of time (1 sec, 1 minute, etc). So, once you know what this acceptable elapsed time is, you can easily log any query that runs longer by just setting this in your &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql.conf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log_min_duration_statement = 1000   # log anything running longer than 1s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now, you have all queries with long run times logged automatically. And these show up nicely in your pgBadger reports too!&lt;/p&gt;

&lt;p&gt;If you’re lucky, you’ll be able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; to see why the query is behaving poorly. However, if your life is like mine, the explain plan will be reasonable and won’t have any smoking guns to speak of. Which means the performance is either load dependent or being influenced by other processes (something is blowing out your caches, for example). In these cases, what you really need is the &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; output from the very instant that it performed poorly. However, you can’t go back in time to get it. But what you can do is make use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;auto_explain&lt;/code&gt; module that ships with PostgreSQL.&lt;/p&gt;

&lt;p&gt;In case the name wasn’t obvious enough, the &lt;code class=&quot;highlighter-rouge&quot;&gt;auto_explain&lt;/code&gt; module causes PostgreSQL to automatically run &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; on queries according to thresholds that you configure. These automatically generated plans are then logged into the normal PostgreSQL logs. Let’s walk through setting it up and see how it works.&lt;/p&gt;

&lt;p&gt;First, in your &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql.conf&lt;/code&gt; we want to enable the module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shared_preload_libraries = 'auto_explain'  # change requires restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As stated, you will have to restart the postmaster to get the module to load. However, let’s configure it in &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql.conf&lt;/code&gt; first:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Add settings for extensions here
#
# auto_explain
# http://www.postgresql.org/docs/current/static/auto-explain.html
auto_explain.log_analyze = true
auto_explain.log_timing = true
auto_explain.log_verbose = true
auto_explain.log_min_duration = '1000ms'
auto_explain.log_nested_statements = true
auto_explain.log_buffers = true
# auto_explain
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What we’ve done here is configure &lt;code class=&quot;highlighter-rouge&quot;&gt;auto_explain&lt;/code&gt; to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN ANALYZE&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;TIMING&lt;/code&gt; option of &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;VERBOSE&lt;/code&gt; option of &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;to log the plan for anything running longer than 1 second (matches &lt;code class=&quot;highlighter-rouge&quot;&gt;log_min_duration_statement&lt;/code&gt;, above)&lt;/li&gt;
  &lt;li&gt;to include statements inside a function to also be logged&lt;/li&gt;
  &lt;li&gt;to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;BUFFERS&lt;/code&gt; option of &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with most &lt;code class=&quot;highlighter-rouge&quot;&gt;GUC&lt;/code&gt; in PostgreSQL, these can all be changed using &lt;code class=&quot;highlighter-rouge&quot;&gt;SET&lt;/code&gt; in a given session, but we’re setting the defaults here. Now that we have them setup, let’s see what it looks like in practice.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28838&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;022&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28838&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;565&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28838&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We connected to PostgreSQL, created a test table, and then used &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_series&lt;/code&gt; to insert 10k rows. In our logs, the following were added:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-11-28 13:20:30 EST [28838]: [18-1] user=doug,db=doug,app=psql,client=[local] LOG:  duration: 33.987 ms  statement: CREATE TABLE x(t text);
2016-11-28 13:20:59 EST [28838]: [19-1] user=doug,db=doug,app=psql,client=[local] LOG:  duration: 16.461 ms  plan:
  Query Text: INSERT INTO x(t) SELECT generate_series(1,10000);
  Insert on public.x  (cost=0.00..50.02 rows=1000 width=32) (actual time=16.459..16.459 rows=0 loops=1)
    Buffers: shared hit=10085 read=47 dirtied=45
    I/O Timings: read=0.012
    -&amp;gt;  Subquery Scan on &quot;*SELECT*&quot;  (cost=0.00..50.02 rows=1000 width=32) (actual time=0.010..4.755 rows=10000 loops=1)
          Output: &quot;*SELECT*&quot;.generate_series
          -&amp;gt;  Result  (cost=0.00..15.02 rows=1000 width=4) (actual time=0.007..1.364 rows=10000 loops=1)
                Output: generate_series(1, 10000)
2016-11-28 13:20:59 EST [28838]: [20-1] user=doug,db=doug,app=psql,client=[local] LOG:  duration: 23.374 ms  statement: INSERT INTO x(t) SELECT generate_series(1,10000);
2016-11-28 13:21:00 EST [30079]: [1-1] user=,db=,app=,client= LOG:  automatic analyze of table &quot;doug.public.x&quot; system usage: CPU 0.00s/0.11u sec elapsed 0.14 sec
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(Note that for illustrative purposes, I issued &lt;code class=&quot;highlighter-rouge&quot;&gt;SET auto_explain.log_min_duration = '0ms'&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;So, you can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE TABLE&lt;/code&gt; didn’t log anything through the &lt;code class=&quot;highlighter-rouge&quot;&gt;auto_explain&lt;/code&gt; module, but the &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO&lt;/code&gt; did. This is a boring example, so let’s try a &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; against our table:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28838&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├───────┤&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1002&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1003&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1004&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1005&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└───────┘&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;982&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and the logs look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-11-28 13:27:38 EST [322]: [7-1] user=,db=,app=,client= LOG:  checkpoint starting: time
2016-11-28 13:27:46 EST [322]: [8-1] user=,db=,app=,client= LOG:  checkpoint complete: wrote 75 buffers (0.0%); 0 transaction log file(s) added, 0 removed, 0 recycled; write=7.569 s, sync=0.092 s, total=7.920 s; sync files=23, longest=0.092 s, average=0.004 s; distance=685 kB, estimate=685 kB
2016-11-28 13:28:48 EST [28838]: [21-1] user=doug,db=doug,app=psql,client=[local] LOG:  duration: 11.120 ms  plan:
  Query Text: SELECT * FROM x ORDER BY t LIMIT 10;
  Limit  (cost=561.10..561.12 rows=10 width=4) (actual time=11.073..11.073 rows=10 loops=1)
    Output: t
    Buffers: shared hit=45
    -&amp;gt;  Sort  (cost=561.10..586.10 rows=10000 width=4) (actual time=11.072..11.072 rows=10 loops=1)
          Output: t
          Sort Key: x.t
          Sort Method: top-N heapsort  Memory: 25kB
          Buffers: shared hit=45
          -&amp;gt;  Seq Scan on public.x  (cost=0.00..345.00 rows=10000 width=4) (actual time=0.018..1.224 rows=10000 loops=1)
                Output: t
                Buffers: shared hit=45
2016-11-28 13:28:48 EST [28838]: [22-1] user=doug,db=doug,app=psql,client=[local] LOG:  duration: 11.813 ms  statement: SELECT * FROM x ORDER BY t LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(You can safely ignore the checkpoint lines at the top there)&lt;/p&gt;

&lt;p&gt;There you have both the statement we ran, and the full &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; plan. You can see we did a sequential scan on the table (looks like it was all in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shared_buffers&lt;/code&gt; too) and then we passed that up to a &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; node for an in-memory sort, and then passed that result set up to the &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt; node.&lt;/p&gt;

&lt;p&gt;While this is a stupid simple example, I hope you can see that having this in production for large, complicated queries will allow you to better diagnose issues. For example, simply doing a manual &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN ANALYZE&lt;/code&gt; on the same query and seeing that you get a different plan is potentially enough to rule out (or in) certain culprits for the intermittent performance issue.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;sup&gt;1&lt;/sup&gt; - This option causes the postmaster to collect info on &lt;em&gt;every&lt;/em&gt; statement executed, even if &lt;code class=&quot;highlighter-rouge&quot;&gt;auto_explain&lt;/code&gt; isn’t going to log it. It has a measurable impact on overall performance. Please test on your workload and decide for yourself if the overhead is worth the trade-off&lt;/p&gt;
</description>
    <pubDate>2016-11-28T07:24:12-05:00</pubDate>
    <link>/posts/EXPLAINing-intermittent-perf-problems/</link>
    <guid isPermaLink="true">/posts/EXPLAINing-intermittent-perf-problems/</guid>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>PostgreSQL logging, strftime, and you</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://www.metasource.com/images/content/data-processing-image.jpg&quot; class=&quot;rleader&quot; /&gt;PostgreSQL has a pretty extensive logging facility. I’ve talked briefly about configuring it to get the most out of pgBadger before, but today I’m gonna talk a bit about the naming of the log file itself. The chosen filename doesn’t have to be static. You can, in fact, have the name dynamically created by using strftime() escapes. But what exactly are those?&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    The strftime() function formats the information from timeptr into the buffer s,
    according to the string pointed to by format.

    The format string consists of zero or more conversion specifications and ordi-
    nary characters.  All ordinary characters are copied directly into the buffer.
    A conversion specification consists of a percent sign ```%''' and one other
    character.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Say what? Essentially, given a timestamp and a format specification, you’ll get the timestamp back in a different formatted output. So what are these format specifications? Well, they are defined by your systems &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; implementation. On Linux, this is (typically) glibc, whereas on OSX and the BSDs, it’s BSD libc. You really shouldn’t see a difference between these two, but it could happen. On macOS Sierra, they are (for the examples below, we’ll use today’s date of Monday, November 21, 2016 with a timestamp of 1pm EST):&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;A    is replaced by national representation of the &lt;span class=&quot;ss&quot;&gt;full&lt;/span&gt; weekday name (&quot;Monday&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;a    is replaced by national representation of the abbreviated weekday name (&quot;Mon&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;B    is replaced by national representation of the &lt;span class=&quot;ss&quot;&gt;full&lt;/span&gt; month name (&quot;November&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;b    is replaced by national representation of the abbreviated month name (&quot;Nov&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;C    is replaced by (year / 100) as decimal number; single digits are preceded by a zero (&quot;20&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;c    is replaced by national representation of time and date (&quot;Mon Nov 21 13:00:00 2016&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;D    is equivalent to ``%m/%d/%y'' (&quot;11/21/16&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;d    is replaced by the day of the month as a decimal number (01-31) (&quot;21&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;e    is replaced by the day of the month as a decimal number (1-31); single digits are preceded by a blank (&quot;21&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;F    is equivalent to ``%Y-%m-%d'' (&quot;2016-11-21&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;G    is replaced by a year as a decimal number with century.  This year is the one that contains the greater part of the week (Monday as the first day of the week) (&quot;2016&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;g    is replaced by the same year as in ``%G'', but as a decimal number without century (00-99) (&quot;16&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;H    is replaced by the hour (24-hour clock) as a decimal number (00-23) (&quot;12&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;h    the same as %b (&quot;Nov&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;I    is replaced by the hour (12-hour clock) as a decimal number (01-12) (&quot;12&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;j    is replaced by the day of the year as a decimal number (001-366) (&quot;326&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;k    is replaced by the hour (24-hour clock) as a decimal number (0-23); single digits are preceded by a blank (&quot;13&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;l    is replaced by the hour (12-hour clock) as a decimal number (1-12); single digits are preceded by a blank (&quot; 1&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;M    is replaced by the minute as a decimal number (00-59) (&quot;00&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;m    is replaced by the month as a decimal number (01-12) (&quot;11&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;n    is replaced by a newline
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;p    is replaced by national representation of either &quot;ante meridiem&quot; (a.m.) or &quot;post meridiem&quot; (p.m.)  as appropriate (&quot;PM&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;R    is equivalent to ``%H:%M'' (&quot;13:00&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;r    is equivalent to ``%I:%M:%S %p'' (&quot;01:00:00 PM&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;S    is replaced by the second as a decimal number (00-60) (&quot;00&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;s    is replaced by the number of seconds since the Epoch, UTC (&quot;1479751200&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;T    is equivalent to ``%H:%M:%S'' (&quot;13:00:00&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;t    is replaced by a tab
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;U    is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number (00-53) (&quot;47&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;u    is replaced by the weekday (Monday as the first day of the week) as a decimal number (1-7) (&quot;1&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;V    is replaced by the week number of the year (Monday as the first day of the week) as a decimal number (01-53).  If the week containing January 1 has four or more days in the new year, then it is week 1; otherwise it is the last week of the previous year, and the next week is week 1 (&quot;47&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;v    is equivalent to ``%e-%b-%Y'' (&quot;21-Nov-2016&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;W    is replaced by the week number of the year (Monday as the first day of the week) as a decimal number (00-53) (&quot;47&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;w    is replaced by the weekday (Sunday as the first day of the week) as a decimal number (0-6) (&quot;1&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;X    is replaced by national representation of the time (&quot;13:00:00&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;x    is replaced by national representation of the date (&quot;11/21/2016&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;Y    is replaced by the year with century as a decimal number (&quot;2016&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;y    is replaced by the year without century as a decimal number (00-99) (&quot;16&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;Z    is replaced by the time zone name (&quot;EST&quot;)
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;z    is replaced by the time zone offset &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; UTC; a leading plus sign stands for east of UTC, a minus sign for west of UTC, hours and minutes follow with two digits each and no delimiter between them (&quot;-0500&quot;)
    &lt;span class=&quot;err&quot;&gt;%%&lt;/span&gt;    is replaced by `%'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Phew! That was a lot wasn’t it? And where exactly does this come into play? As the &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql.conf&lt;/code&gt; says:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log_filename = 'postgresql-%a.log'      # log file name pattern,
                                        # can include strftime() escapes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, you can use any of the escapes above to craft a filename that automagically gets updated according to the current timestamp. In my example above, I’m getting PostgreSQL to create a new logfile with the local weekday abbreviation. So my &lt;code class=&quot;highlighter-rouge&quot;&gt;$PGDATA/pg_log&lt;/code&gt; directory will only ever contain:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postgresql-Sun.log postgresql-Mon.log postgresql-Tue.log
postgresql-Wed.log postgresql-Thu.log postgresql-Fri.log
postgresql-Sat.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But wait! The key to all this is that &lt;em&gt;PostgreSQL only evaluates the filename when it first opens/creates the logfile&lt;/em&gt;. So, if you start your cluster on Mon and do not restart it and don’t have it configured to log rotate, you’ll still be writing to &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql-Mon.log&lt;/code&gt; forever. Fortunately, PostgreSQL has you covered here too:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log_rotation_age = 1d      # Automatic rotation of logfiles will
                           # happen after that time.  0 disables.
log_rotation_size = 10MB   # Automatic rotation of logfiles will
                           # happen after that much log output.
                           # 0 disables.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, using my &lt;code class=&quot;highlighter-rouge&quot;&gt;log_filename&lt;/code&gt; from above, I enable &lt;code class=&quot;highlighter-rouge&quot;&gt;log_rotation_age&lt;/code&gt; (set to 1 day) and disable &lt;code class=&quot;highlighter-rouge&quot;&gt;log_rotation_size&lt;/code&gt; and I automatically get a new log every day. If I wanted hourly logs, I could do something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log_filename = 'postgresql-%a-%H'
log_rotation_age = 1h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which would give me logs of &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql-Mon-00&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql-Mon-01&lt;/code&gt;, etc. You should be able to see how combining these three &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql.conf&lt;/code&gt; parameters and some crafty strftime() escapes gives you a &lt;em&gt;ton&lt;/em&gt; of flexibility in your logging. So go forth and tweak those logs!&lt;/p&gt;
</description>
    <pubDate>2016-11-21T07:17:03-05:00</pubDate>
    <link>/posts/PostgreSQL-logging-strftime-and-you/</link>
    <guid isPermaLink="true">/posts/PostgreSQL-logging-strftime-and-you/</guid>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>Upgrading PostgreSQL 5x faster</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://www.navops.io/img/launch-samsung-1.gif&quot; class=&quot;lleader&quot; /&gt;Upgrading your PostgreSQL database from one major version (e.g. 9.4.x) to another major version (e.g. 9.5.x) used to a painful and exceedingly slow process. You essentially had two options: dump / reload the data or use one of the complex logical replication tools.&lt;/p&gt;

&lt;p&gt;Thankfully, the PostgreSQL team introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_upgrade&lt;/code&gt; back in version 9.0. Because the way data is stored internally in its datafiles in PostgreSQL rarely changes, &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_upgrade&lt;/code&gt; is able to re-use the existing datafiles (while manipulating some catalog entries) to “short circuit” the upgrade process. While this isn’t (yet) a true “in place upgrade” as done by some other databases, it’s pretty close. And it’s stupid fast. In my testing on my overworked Macbook Pro, it took &lt;em&gt;1/5&lt;/em&gt; as long to upgrade as a traditional dump and reload. So, let’s look at this process shall we?&lt;/p&gt;

&lt;p&gt;First, we assume that we have both PostgreSQL 9.5 and 9.6 installed and both have initialized (empty) clusters (see &lt;a href=&quot;https://hunleyd.github.io/Getting-fancy-with-PostgreSQL-and-Homebrew/&quot;&gt;here&lt;/a&gt; if you need to do this). We’re going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pgbench&lt;/code&gt; to create some data in our PostgreSQL 9.5 instance:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~/foo » pg 9.5
doug@Douglass-MacBook-Pro ~/foo » createdb bench1; createdb bench2; createdb bench3
doug@Douglass-MacBook-Pro ~/foo » pgbench -i -s 15 bench1 ; pgbench -i -s 70 bench2 ; pgbench -i -s 600 bench3
doug@Douglass-MacBook-Pro ~/foo » pgbench -c 4 -j 2 -T 600 bench1 ; pgbench -c 4 -j 2 -T 600 bench2 ; pgbench -c 4 -j 2 -T 600 bench3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we’ve got data in our cluster, we can do the dump. If this were a production instance, &lt;em&gt;this is where you’d have to stop your application(s)&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~/foo » time pg_dumpall &amp;gt; data.sql
pg_dumpall &amp;gt; data.sql  20.57s user 30.63s system 4% cpu 18:43.70 total
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ve now dumped out all our data, and spent 18 minutes with the application(s) down. Let’s restore our data to the PostgreSQL 9.6 cluster now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~/foo » pg 9.6
doug@Douglass-MacBook-Pro ~/foo » time psql -f data.sql
psql -f data.sql  14.53s user 18.30s system 1% cpu 37:48.49 total
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After 37 minutes, our data is back and we can start our applications back up. &lt;em&gt;An outage of approximately 56.5 minutes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s blow away our PostgreSQL 9.6 cluster and use &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_upgrade&lt;/code&gt; to complete the same task. You would do this with the application(s) down as well!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~/foo » rm -fr $PGDATA/*
doug@Douglass-MacBook-Pro ~/foo » initdb $PGDATA
doug@Douglass-MacBook-Pro ~/foo » export OPGDATA=$PGDATA/../9.5
doug@Douglass-MacBook-Pro ~/foo » time pg_upgrade -d $OPGDATA -D $PGDATA -b /usr/local/opt/postgresql-9.5/bin -B /usr/local/opt/postgresql-9.6/bin
pg_upgrade -d $OPGDATA -D $PGDATA -b /usr/local/opt/postgresql-9.5/bin -B   0.40s user 12.12s system 1% cpu 10:26.64 total
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we’re done &lt;em&gt;in 10.5 minutes&lt;/em&gt;. It took 1/5 the outage of the dump / load method. And that’s on my puny dataset with my overworked laptop! Pretty impressive, no?&lt;/p&gt;

&lt;p&gt;For the curious, the &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_upgrade&lt;/code&gt; output that I omitted above for readability’s sake is:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/3ff1f5503fc42e3446b35715bd0ec932.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
</description>
    <pubDate>2016-11-18T07:18:28-05:00</pubDate>
    <link>/posts/Upgrading-PostgreSQL-5x-faster/</link>
    <guid isPermaLink="true">/posts/Upgrading-PostgreSQL-5x-faster/</guid>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>Managing multiple PostgreSQL installs via Homebrew</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://cdn.curvve.com/wp-content/uploads/2013/09/homebrew_osx_logo.png&quot; class=&quot;rleader&quot; /&gt;Following on from &lt;a href=&quot;https://hunleyd.github.io/Getting-fancy-with-PostgreSQL-and-Homebrew/&quot;&gt;this&lt;/a&gt; post, you probably have multiple versions of PostgreSQL installed on your Mac. In that post, I added an example function to help you manage all these concurrent installs. Today, I’m back with a full-fledged shell script to help manage all this. Without further ado, the script:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/0ee7d8745c2f9854b34ed48ae9196362.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;But what does it do? It’s pretty simple actually. When you call this script, you tell it what version of PostgreSQL you want:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~ » pg 9.6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and then the script does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;checks if the requested version is installed, and installs it if not&lt;/li&gt;
  &lt;li&gt;checks if another version of PostgreSQL is running, and stops it&lt;/li&gt;
  &lt;li&gt;checks if another version is linked as the active version, and unlinks it&lt;/li&gt;
  &lt;li&gt;links the requested version as the active version&lt;/li&gt;
  &lt;li&gt;sets PGDATA to point to the requested version’s data cluster&lt;/li&gt;
  &lt;li&gt;does an &lt;code class=&quot;highlighter-rouge&quot;&gt;initdb&lt;/code&gt; for the requested version if needed&lt;/li&gt;
  &lt;li&gt;starts the requested version’s cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll be the first to admit that the script could use additional work, but it’s functional enough to start using today. As I continue to improve the script, I’ll update the gist with those changes, so check back every so often.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;
</description>
    <pubDate>2016-11-16T08:45:27-05:00</pubDate>
    <link>/posts/Managing-multiple-PostgreSQL-installs-via-Homebrew/</link>
    <guid isPermaLink="true">/posts/Managing-multiple-PostgreSQL-installs-via-Homebrew/</guid>
    
     <category>postgresql</category>
    
     <category>osx</category>
    
   </item>
  
   <item>
    <title>Routing email through GMail on OSX</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://www.postfix.org/mysza.gif&quot; class=&quot;lleader&quot; /&gt;Like most geeks, I have scripts that I’ve written that I like to have run from cron on a regular basis. And since the running of these scripts might be in the middle of the night, I like for them to email their output to me so I know if they succeeded or failed. As such, I need an MTA on my computer that can actually deliver these emails to GMail. For me, this is trivial using Sendmail or SSMTP on a Linux box, but I can never remember how to do this using Postfix on OSX. So after having to Google everything to get this running once more, I’m going to commit the steps here for my future self to reference :)&lt;/p&gt;

&lt;p&gt;The first thing we’re going to do is open an iTerm and &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -i&lt;/code&gt; to become root. Then we’re going to &lt;code class=&quot;highlighter-rouge&quot;&gt;vi /etc/postfix/main.cf&lt;/code&gt; and we’re going to add/set the following:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myhostname&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;relayhost&lt;/span&gt; = [&lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;]:&lt;span class=&quot;m&quot;&gt;587&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_auth_enable&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_password_maps&lt;/span&gt;= &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;sasl_passwd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_security_options&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;noanonymous&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_mechanism_filter&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_use_tls&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have Two-Factor Auth (2FA) enabled on my Google account (you should too!), so for me, the next step is to log into Google and create an ‘app password’. Once I have that password in hand, we &lt;code class=&quot;highlighter-rouge&quot;&gt;vi /etc/postfix/sasl_passwd&lt;/code&gt; and add:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;]:&lt;span class=&quot;m&quot;&gt;587&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;@&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;:&lt;span class=&quot;n&quot;&gt;app_passwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Secure that file by running &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 0600 /etc/postfix/sasl_passwd&lt;/code&gt; and then have Postfix hash it by doing &lt;code class=&quot;highlighter-rouge&quot;&gt;postmap /etc/postfix/sasl_passwd&lt;/code&gt;. Finally, restart Postfix:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;launchctl stop org.postfix.master
launchctl start org.postfix.master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And everything should work.&lt;/p&gt;
</description>
    <pubDate>2016-11-15T05:51:00-05:00</pubDate>
    <link>/posts/Routing-email-through-GMail-on-OSX/</link>
    <guid isPermaLink="true">/posts/Routing-email-through-GMail-on-OSX/</guid>
    
     <category>osx</category>
    
     <category>geek</category>
    
     <category>computers</category>
    
   </item>
  
   <item>
    <title>Getting fancy with PostgreSQL and Homebrew</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://cdn.curvve.com/wp-content/uploads/2013/09/homebrew_osx_logo.png&quot; class=&quot;rleader&quot; /&gt;In our &lt;a href=&quot;https://hunleyd.github.io/PostgreSQL-Homebrew-and-You/&quot;&gt;previous&lt;/a&gt; post, we installed PostgreSQL via Homebrew and got our own little cluster up and running under our userid. That is probably good enough for 90% of the users out there who just want to play with or devel on PostgreSQL, but for those of us who need a little more flexibility in our installs, we’re going to take the next step.&lt;/p&gt;

&lt;p&gt;First, if you have any data in your existing cluster that you want to preserve, let’s backup it up. We’re just going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_dumpall&lt;/code&gt; here since it’s quick-n-dirty:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/22e765b45c877b5c9c2e35722b464393.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now, we can stop our cluster:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/f02a36a115c3fed3310e7abc5f3fb419.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And uninstall the current PostgreSQL:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/4dffee8e9ebbf2c052162f2ecc36e812.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And remove the remnants of our cluster:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/7c064e25c8916fa7fe0e3cdb846d3c78.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now we’ve got a clean slate. So, let’s tell Homebrew to stop using the default PostgreSQL and use Peter Eisentraut’s version (if you don’t know, Peter actually contributes to PostgreSQL):&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/b099ff10c1cd1713f37ff40cf320adf3.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As of this writing, Peter makes PostgreSQL 8.3 and above available. However, only PostgreSQL 9.2 and above are officially supported by the PostgreSQL community. So let’s install the supported versions:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/bcc4e0e7c55e849b7adb647d9727674c.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As it says in the output, these are ‘keg-only’, which has the nice side effect that they are automatically installed in side-by-side directories &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/opt/postgresql-9.1/&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;Peter configures PostgreSQL with just about all the options turned on:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/c56727a3249042841c2609439209c8fd.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and you get all the extensions that are in ‘contrib’ as well. However, if you find that you need to install another extension, I advocate using &lt;code class=&quot;highlighter-rouge&quot;&gt;pex&lt;/code&gt;. You would install it like this:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/37c2e01a0d400c0a16c7fb7d9b8d1030.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Sadly, it will reinstall the default PostgreSQL brew recipe, but we’ll simply pretend that it’s not there going forward. Once installed, use &lt;code class=&quot;highlighter-rouge&quot;&gt;pex&lt;/code&gt; like so:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/d2d004871557adc49ae77b19181bd999.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ip4r&lt;/code&gt; extension was installed into my PostgreSQL 9.4 instance.&lt;/p&gt;

&lt;p&gt;Now, you might be wondering how to deal with all these concurrent versions. If you type &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_dump&lt;/code&gt; which one willl you get? How can you force it to use a specific version? Right now, you won’t get any version, since it’s not in your path. You will need to specify exactly what you want:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~ » /usr/local/opt/postgresql-9.6/bin/psql --version
psql &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;PostgreSQL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 9.6.1
doug@Douglass-MacBook-Pro ~ »
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which is a huge pita. So, let’s make a little convenience function in our shell. Edit your &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; or your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; (or whatever) and add a function like this:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/hunleyd/b27085662bea30f3b39de293a038b766.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and then simply call &lt;code class=&quot;highlighter-rouge&quot;&gt;pg 9.5&lt;/code&gt; to set PostgreSQL 9.5 as your ‘active’ instance:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oug@Douglass-MacBook-Pro ~ » pg 9.5
Stopping PostgreSQL 9.4... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;!
Activating PostgreSQL 9.5... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;!
Initializing PostgreSQL 9.5 cluster... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;!
Starting PostgreSQL 9.5... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;!
doug@Douglass-MacBook-Pro ~ »
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Restore your data:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/ihunleyd/a54dab54b0b44b7e9fd05ca54cf5fb95.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and there you be. Ain’t it beautiful? :)&lt;/p&gt;
</description>
    <pubDate>2016-11-10T09:58:15-05:00</pubDate>
    <link>/posts/Getting-fancy-with-PostgreSQL-and-Homebrew/</link>
    <guid isPermaLink="true">/posts/Getting-fancy-with-PostgreSQL-and-Homebrew/</guid>
    
     <category>osx</category>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>PostgreSQL, Homebrew, and You</title>
    <description>&lt;p&gt;&lt;img src=&quot;http://cdn.curvve.com/wp-content/uploads/2013/09/homebrew_osx_logo.png&quot; class=&quot;lleader&quot; /&gt;If you need to install &lt;a href=&quot;http://www.posatgresql.org&quot;&gt;PostgreSQL&lt;/a&gt; onto your Macbook, you have several options available to you nowadays. You could use the &lt;a href=&quot;https://bigsql.com/postgresql/installers.jsp&quot;&gt;BigSQL&lt;/a&gt; package, or you could use &lt;a href=&quot;http://postgresapp.com&quot;&gt;Postgres.app&lt;/a&gt;, or several others. However, if you’re a geek running OSX, you’ve probably already installed &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt; and it has a wonderful PostgreSQL package. So let’s use it, shall we?&lt;/p&gt;

&lt;p&gt;I’m not going to walk you through installing Homebrew, so let’s just assume it’s already up and running and you’ve followed all the directions. At this point, you have &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; is up and running. So, let’s tell &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; to install PostgreSQL:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~ » brew install postgresql
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/postgresql-9.5.4_1.sierra.b
Already downloaded: /Users/doug/Library/Caches/Homebrew/postgresql-9.5.4_1.sierra.bottle.tar.gz
==&amp;gt; Pouring postgresql-9.5.4_1.sierra.bottle.tar.gz
==&amp;gt; Using the sandbox
==&amp;gt; /usr/local/Cellar/postgresql/9.5.4_1/bigsqln/initdb /usr/local/var/postgres
==&amp;gt; Caveats
If builds of PostgreSQL 9 are failing and you have version 8.x installed,
you may need to remove the previous version first. See:
  https://github.com/Homebrew/homebrew/issues/2510

To migrate existing data from a previous major version (pre-9.0) of PostgreSQL, see:
  https://www.postgresql.org/docs/9.5/static/upgrading.html

To migrate existing data from a previous minor versionn (9.0-9.4) of PostgreSQL, see:
  https://www.postgresql.org/docs/9.5/static/pgupgrade.html

  You will need your previous PostgreSQL installation from brew to perform `pg_upgrade`.
  Do not run `brew cleanup postgresql` until you have performed the migration.

To have launchd start postgresql now and restart at login:
  brew services start postgresql
Or, if you don't want/need a background service you can just run:
  pg_ctl -D /usr/local/var/postgres start
==&amp;gt; Summary
🍺  /usr/local/Cellar/postgresql/9.5.4_1: 3,147 files, 35M
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, it downloaded the package, installed the binaries, and ran &lt;code class=&quot;highlighter-rouge&quot;&gt;initdb&lt;/code&gt; for us! As the output tells us, we can set PostgreSQL to auto-start when we login by issuing:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~ » brew services start postgresql
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;Successfully started &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;postgresql&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;label: homebrew.mxcl.postgresql&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And if you check your process listing, you can see that the cluster is up and running under your id:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doug@Douglass-MacBook-Pro ~ » ps -efw|grep postgres
  501  6808     1   0 11:03AM ??         0:00.02 /usr/local/opt/postgresql/bin/postgres -D /usr/local/var/postgres
  501  6817  6808   0 11:03AM ??         0:00.00 postgres: logger process
  501  6819  6808   0 11:03AM ??         0:00.00 postgres: checkpointer process
  501  6820  6808   0 11:03AM ??         0:00.00 postgres: writer process
  501  6821  6808   0 11:03AM ??         0:00.00 postgres: wal writer process
  501  6822  6808   0 11:03AM ??         0:00.00 postgres: autovacuum launcher process
  501  6823  6808   0 11:03AM ??         0:00.00 postgres: stats collector process
doug@Douglass-MacBook-Pro ~ »
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And just like that, you have PostgreSQL installed and running! Set &lt;code class=&quot;highlighter-rouge&quot;&gt;$PGDATA&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/var/postgres&lt;/code&gt; and you’re all set.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    <pubDate>2016-11-04T09:30:09-04:00</pubDate>
    <link>/posts/PostgreSQL-Homebrew-and-You/</link>
    <guid isPermaLink="true">/posts/PostgreSQL-Homebrew-and-You/</guid>
    
     <category>osx</category>
    
     <category>postgresql</category>
    
   </item>
  
 </channel>
</rss>
