<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
  <title></title>
  <description>Doug's various musings</description>
  <atom:link href="http://hunleyd.github.io/feed.xml" rel="self" type="application/rss+xml" />
  <link>http://hunleyd.github.io</link>
  <updated>2016-11-03T11:47:13-04:00</updated>
  <author>
   <name></name>
   <email></email>
  </author>

  
   <item>
    <title>Inaugural pgCMH mtg scheduled</title>
    <description>&lt;p&gt;&lt;img src=&quot;/images/pgCMH.png&quot; border=0 height=200 width=200 align=right style=&quot;PADDING_LEFT: 5px&quot;&gt; As announced on our &lt;a href=&quot;http://www.twitter.com/pgCMH&quot;&gt;Twitter&lt;/a&gt;, we&amp;#39;ve scheduled our inaugural meeting for Jan 24, 2017 at 1800 hrs. The folks at CoverMyMeds will graciously provide the meeting space (and parking garage) while OpenSCG is buying the pizza!&lt;/p&gt;

&lt;p&gt;At this first meeting, we&amp;#39;ll be discussing what you, the members, would like to get from the meetings, we&amp;#39;ll talk about future topics, and general organizational things. I know it&amp;#39;s not exciting, but I need everyone&amp;#39;s input to make this group something you get value from.&lt;/p&gt;

&lt;div class='jekyll-twitter-plugin'&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Our first mtg is happening on Jan 24 at &lt;a href=&quot;https://twitter.com/CoverMyMeds&quot;&gt;@covermymeds&lt;/a&gt; with &lt;a href=&quot;https://twitter.com/OpenSCG&quot;&gt;@openscg&lt;/a&gt; buying pizza. Bring a friend! RSVP at &lt;a href=&quot;https://t.co/600ZNbPV8e&quot;&gt;https://t.co/600ZNbPV8e&lt;/a&gt;&lt;/p&gt;&amp;mdash; pgCMH (@pgCMH) &lt;a href=&quot;https://twitter.com/pgCMH/status/788780137630216192&quot;&gt;October 19, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Please RSVP via the &lt;a href=&quot;https://www.meetup.com/postgresCMH/events/234969649/&quot;&gt;MeetUP event&lt;/a&gt; so we have sufficient food and drink!&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;
</description>
    <pubDate>2016-11-03T07:45:32-04:00</pubDate>
    <link>http://hunleyd.github.io/Inaugural-pgCMH-mtg/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Inaugural-pgCMH-mtg/</guid>
    
     <category>pgcmh</category>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>Mi Box</title>
    <description>&lt;p&gt;&lt;img src=&quot;https://i5.walmartimages.com/asr/a45c44b3-a6fc-465e-8231-16f42efc6347_1.474cf868352361552e656c2cfec1f962.jpeg&quot; border=0 height=200 width=200 align=left style=&quot;PADDING-RIGHT: 5px&quot;&gt;I&amp;#39;m a fan of Android TV. While I didn&amp;#39;t blog about it, I ran out and bought a Nexus Player on day 1. And I loved it! OK, I loved it &lt;em&gt;more&lt;/em&gt; after the upgrade to Android 6.x, but still.&lt;/p&gt;

&lt;p&gt;Well, now I&amp;#39;ve upgraded from the Nexus Player to the Mi Box. It&amp;#39;s a bit of a risk, since no one knows the upgrade history for Xiaomi, but I&amp;#39;m OK with that. Especially at a mere $70 for this thing. As much as I loved the Player, I am enjoying this device &lt;em&gt;so much more&lt;/em&gt;. It&amp;#39;s stupid fast, the remote is so much better, and I feel like I get a better picture out of it (which is silly, I don&amp;#39;t have a 4k TV so it should be the same 1080p HD picture I got from the Player).&lt;/p&gt;

&lt;p&gt;This tiny little box (101 x 101 x 19.5mm) comes with an Amlogic Quad-core Cortex-A53 processor running at 2.0GHz, a Mali 450 GPU running at 750MHz, 2GB of ram, and 8GB of storage. On the back is an HDMI port, a headphone jack (why?), a power adaptor port (sadly, not a standard USB-C or MicroUSB), a single USB 2.0 port. It&amp;#39;s pretty sparse port wise, but really that&amp;#39;s all you need. There&amp;#39;s a subtly white LED on the very front of the device to show you that it&amp;#39;s powered on too. Otherwise, it&amp;#39;s just a sleek little black hockey puck sitting in my entertainment center.&lt;/p&gt;

&lt;p&gt;Overall, I&amp;#39;m so pleased with this little thing that I convinced Stephanie to buy one, gave my Player to Tina, and I&amp;#39;m considering buying one of these for Emily when she moves out.&lt;/p&gt;

&lt;p&gt;Review: &amp;#9733;&amp;#9733;&amp;#9733;&amp;#9733;&amp;#9734;&lt;/p&gt;
</description>
    <pubDate>2016-11-02T06:27:55-04:00</pubDate>
    <link>http://hunleyd.github.io/Mi-Box/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Mi-Box/</guid>
    
     <category>android</category>
    
     <category>review</category>
    
   </item>
  
   <item>
    <title>Announcing pgCMH</title>
    <description>&lt;p&gt;&lt;img src=&quot;/images/pgCMH.png&quot; border=0 height=200 width=200 align=right&gt;I&amp;#39;ve been kicking around the idea of founding a Columbus-based PostgreSQL User Group for a while now. I even went so far as to float the idea to people at &lt;a href=&quot;http://www.ohiolinux.org&quot;&gt;OLF&lt;/a&gt; in &amp;#39;14. After much hemming and hawing (and no one else stepping up in the interim), I&amp;#39;ve finally gone and done it.&lt;/p&gt;

&lt;p&gt;pgCMH is the name of my newly formed group, and we&amp;#39;re good to go. We&amp;#39;ve got our own Twitter (&lt;a href=&quot;http://www.twitter.com/pgCMH&quot;&gt;@pgCMH&lt;/a&gt;):&lt;/p&gt;

&lt;div class='jekyll-twitter-plugin'&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/PostgreSQL?src=hash&quot;&gt;#PostgreSQL&lt;/a&gt; 9.6.1, 9.5.5, 9.4.10, 9.3.15, 9.2.19 and 9.1.24 Released! &lt;a href=&quot;https://t.co/RH27To33gh&quot;&gt;https://t.co/RH27To33gh&lt;/a&gt;&lt;/p&gt;&amp;mdash; pgCMH (@pgCMH) &lt;a href=&quot;https://twitter.com/pgCMH/status/791654418731065344&quot;&gt;October 27, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;as well as our own &lt;a href=&quot;http://www.meetup.com/postgresCMH&quot;&gt;MeetUp&lt;/a&gt; page. We&amp;#39;ve got a sponsor providing food, and another providing the meeting location. Our first meeting will be in Jan, thanks to all the scheduling conflicts the upcoming holidays create.&lt;/p&gt;

&lt;p&gt;Watch this space for updates, follow our Twitter, and join the mailing list on MeetUp. I&amp;#39;d love to get your participation and input. Let&amp;#39;s make this group as wildly successful as we can!&lt;/p&gt;
</description>
    <pubDate>2016-10-31T07:35:22-04:00</pubDate>
    <link>http://hunleyd.github.io/Announcing-pgCMH/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Announcing-pgCMH/</guid>
    
     <category>pgcmh</category>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>Incremental pgBadger</title>
    <description>&lt;p&gt;&lt;img src=&quot;https://dalibo.github.io/pgbadger/logo_pgbadger.png&quot; border=0 align=left&gt; You&amp;#39;re probably already running &lt;a href=&quot;https://dalibo.github.io/pgbadger/index.html&quot;&gt;pgBadger&lt;/a&gt; to monitor your PostgreSQL logs. However, you&amp;#39;re probably &lt;em&gt;not&lt;/em&gt; running it incrementally throughout the day. Most likely, you&amp;#39;ve setup a &lt;code&gt;cron.daily&lt;/code&gt; job that runs pgBadger against yesterday&amp;#39;s log(s). And that&amp;#39;s great. Except when you get the dreaded &amp;quot;what just happened on the db?&amp;quot; email. Are you going to wait until tonight&amp;#39;s normal run of pgBadger to see what happened? Are you going to run a &amp;#39;one off&amp;#39; pgBadger against today&amp;#39;s logfile and wait for it to process the &lt;em&gt;entire&lt;/em&gt; log? Or are you going to copy the log off somewhere, edit it to cut it down, and &lt;em&gt;then&lt;/em&gt; run pgBadger against this cut-down version (hoping you left enough in the log to see proper trending)?&lt;/p&gt;

&lt;p&gt;No, most likely you&amp;#39;re going to look at your actual monitoring tool that does real-time monitoring of your db and try to figure things out from there. You &lt;em&gt;are&lt;/em&gt; running some kind of db monitoring tool, right?&lt;/p&gt;

&lt;p&gt;However, let&amp;#39;s say that for, uh, reasons, you only have pgBadger at your disposal &lt;em&gt;right this instant&lt;/em&gt;. Well, if you were making use of pgBadger&amp;#39;s &lt;em&gt;incremental mode&lt;/em&gt; you could simply fire off the next scheduled run and it would only process those log entries that were new since the last run. So, for example, if you had a &lt;code&gt;cron.hourly&lt;/code&gt; run of pgBadger it would only process the last hour&amp;#39;s worth of entries to update today&amp;#39;s report. No waiting to process multiple hours of info that you don&amp;#39;t need, no editing of the logfile to remove things outside the window you care about, just run it and done.&lt;/p&gt;

&lt;p&gt;Sounds nice, right? So let&amp;#39;s set this up shall we? I&amp;#39;m assuming you&amp;#39;ve already setup &lt;code&gt;postgresql.conf&lt;/code&gt; appropriately, but if you haven&amp;#39;t please go that first. The pgBadger website has good documentation on how to do so. According to the docs:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;-I | --incremental     : use incremental mode, reports will be generated by days in a separate directory, --outdir must be set.
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;is how we turn on incremental mode. You&amp;#39;ll note that we also need to specify an output dir:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;-O | --outdir path     : directory where out file must be saved
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I usually stick the pgBadger output into the &lt;code&gt;pg_log&lt;/code&gt; directory. In my mind, having the logs and the report on the logs next to each makes sense, but feel free to stick yours wherever.&lt;/p&gt;

&lt;p&gt;Finally, we probably don&amp;#39;t need pgBadger reports that are too old, and the docs say we can cull the cruft automatically:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;-R | --retention N     : number of week to keep in incremental mode. Default to 0, disabled. Used to set the number of weel to keep in output directory. Older weeks and days directory are automatically removed.
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;(Ignore the typo, it&amp;#39;s that way in the code)&lt;/p&gt;

&lt;p&gt;On my servers, I have PostgreSQL setup to log into a different file for each day of the week, with automatic rotation and truncation:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;log_filename = &amp;#39;postgresql-%a.log&amp;#39;
log_truncate_on_rotation = on
log_rotation_age = 1d
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;so my &lt;code&gt;cron.hourly&lt;/code&gt; pgBadger looks like:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pgbadger \
    -I \
    -O $PGDATA/pg_log \
    -R 12 \
    -q \
    $PGDATA/pg_log/postgresql-$(date --date yesterday +%a) \
    $PGDATA/pg_log/postgresql-$(date +%a)
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;which as you can see always feeds both yesterday&amp;#39;s and today&amp;#39;s log into pgBadger (since the cron runs at 2300 and then again at 0000, we need yesterday&amp;#39;s log to catch that last hour). Since we&amp;#39;re running in incremental mode, it knows &lt;em&gt;at every run&lt;/em&gt; where it left off in the files the last time and does a &lt;code&gt;seek&lt;/code&gt; to skip over that data. This cuts the run time down &lt;em&gt;significantly&lt;/em&gt; even with the PostgreSQL logging &lt;em&gt;cranked up&lt;/em&gt;. You can see it here:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
DEBUG: Starting reading file postgresql-Wed.log...
DEBUG: Start parsing at offset 412677131 of file postgresql-Wed.log to 433543395
[======================&amp;gt;  ] Parsed 413815537 bytes of 433543395 (95.45%), queries
...
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;As you can see, it jumps right in at 95% of the file and only processes the newest 5%. In fact, this takes a mere 20 seconds:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;statistics gathering took:20 wallclock secs (19.44 usr +  0.17 sys = 19.61 CPU)
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;on my overloaded Macbook!&lt;/p&gt;

&lt;p&gt;So there you have it. Not counting the time it takes you to &lt;code&gt;ssh&lt;/code&gt; to your server, it would have taken all of &lt;em&gt;20 seconds&lt;/em&gt; to have an updated report of what just happened on your database!&lt;/p&gt;

&lt;p&gt;Keep in mind, this is also with a &lt;em&gt;single thread&lt;/em&gt;. pgBadger has the ability to run multi-threaded. See the &lt;code&gt;--help&lt;/code&gt; for details.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    <pubDate>2016-10-26T10:46:09-04:00</pubDate>
    <link>http://hunleyd.github.io/Incremental-pgBadger/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Incremental-pgBadger/</guid>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>I'm syndicated</title>
    <description>&lt;p&gt;Someone at work thought it would be a good idea to give me access to the corporate blog so that I might &lt;a href=&quot;http://www.openscg.com/category/postgresql-blogs/doug-postgresql/&quot;&gt;post&lt;/a&gt; PostgreSQL-related things there and have them syndicted to &lt;a href=&quot;http://planet.postgresql.org/&quot;&gt;Planet PostgreSQL&lt;/a&gt;. So my PostgreSQL ramblings will show up there now instead of here. This should be fun!&lt;/p&gt;
</description>
    <pubDate>2016-10-08T11:19:57-04:00</pubDate>
    <link>http://hunleyd.github.io/Im-Syndicated/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Im-Syndicated/</guid>
    
     <category>work</category>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>Linka</title>
    <description>&lt;p&gt;&lt;img src=&quot;https://static1.squarespace.com/static/5527df31e4b022b79f2009ba/56d0e2c622482e09ee7d6032/56d0e2cca3360cb25587ca98/1456530250502/LifeStle_Silver_sm.jpg?format=500w&quot;  border=0 align=right style=&quot;PADDING-LEFT: 5px&quot;&gt;My &lt;a href=&quot;http://www.linkalock.com&quot;&gt;Linka&lt;/a&gt; smart bike lock from Kickstarter showed up today. Holy Hell is this thing solid and hefty! Like for reals, this is gonna throw the balance of the bike off :)&lt;/p&gt;

&lt;p&gt;I know what you&amp;#39;re thinking. A &lt;em&gt;smart&lt;/em&gt; bike lock? Why? Yeah, I know. However, even without the smart gimmicks, this is a nice self-contained bike lock. It mounts directly to the frame, is hella hefty and thick (1.6 pounds). Has a built in &amp;#39;someone is fucking with me&amp;#39; alarm (that is quite ear piercing). It&amp;#39;s made of through-hardened steel and has a square cross-section. And it doesn&amp;#39;t stick out like a sore thumb when mounted.&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;#39;ll edit this post later with thoughts after use.&lt;/p&gt;
</description>
    <pubDate>2016-10-03T09:30:58-04:00</pubDate>
    <link>http://hunleyd.github.io/Linka/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Linka/</guid>
    
     <category>kickstarter</category>
    
     <category>biking</category>
    
   </item>
  
   <item>
    <title>Welcome to Cypheri</title>
    <description>&lt;p&gt;&lt;img src=&quot;https://www.nationstates.net/images/flags/uploads/cypheri__561515.jpg&quot; border=0 align=left style=&quot;PADDING-RIGHT: 5px&quot;&gt;I recently discovered the online game &lt;a href=&quot;https://www.nationstates.net&quot;&gt;NationStates&lt;/a&gt; thanks to a Reddit thread and was intrigued. So I logged in, created the nation of Cypheri and then used &lt;a href=&quot;https://blogtrottr.com&quot;&gt;BlogTrottr&lt;/a&gt; to feed the RSS feed into my inbox (which allows me offline play essentially. I ignore it until I get a notice). So far, it&amp;#39;s been a neat little experience. I&amp;#39;m pretty sure if you know me well enough to be reading this blog that I know you well enough to say you&amp;#39;ll enjoy it too.&lt;/p&gt;

&lt;p&gt;Without further ado, let me welcome you to the Republic of Cypheri, a left-leaning college state. Our motto is &amp;quot;strength through freedom&amp;quot;.&lt;/p&gt;

&lt;p&gt;The Republic of Cypheri is a tiny, genial nation, renowned for its compulsory military service and irreverence towards religion. The compassionate population of 7 million Cypherians enjoy extensive civil freedoms, particularly in social issues, while business tends to be more regulated.&lt;/p&gt;

&lt;p&gt;The large government prioritizes Education, although Welfare, Defense, and Law &amp;amp; Order are also considered important, while Spirituality and Industry are ignored. The average income tax rate is 39.8%, but much higher for the wealthy.&lt;/p&gt;

&lt;p&gt;The Cypherian economy, worth 251 billion dollars a year, is fairly diversified and led by the Tourism industry, with major contributions from Automobile Manufacturing, Basket Weaving, and Retail. State-owned companies are common. Average income is 35,928 dollars, and evenly distributed, with the richest citizens earning only 2.0 times as much as the poorest.&lt;/p&gt;

&lt;p&gt;Thanks for visiting, we hope you enjoyed your time here!&lt;/p&gt;
</description>
    <pubDate>2016-10-01T07:23:56-04:00</pubDate>
    <link>http://hunleyd.github.io/Welcome-to-Cypheri/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Welcome-to-Cypheri/</guid>
    
     <category>general</category>
    
     <category>gaming</category>
    
   </item>
  
   <item>
    <title>Functional Blog Archives</title>
    <description>&lt;p&gt;After an afternoon dicking around with Jekyll templates and Google serching, I&amp;#39;ve fixed up this site&amp;#39;s archive pages and tag cloud pages. I now have functional archive pages for everything, each year, each month of said year, and each day of said month. And they should all continue to function perfectly well on their own as time progresses (unless I bork something up later trying to be clever). I&amp;#39;ve also modified the tag cloud page to fit in the archive pages&amp;#39; look an feel. It&amp;#39;s not a true tag cloud in that I don&amp;#39;t increae the weight or height of the font based on frequency, but the cloud does contain every tag used across the blog and each tag has it&amp;#39;s own page showing all posts tagged as such.&lt;/p&gt;

&lt;p&gt;So, yeah. Enjoy, or something.&lt;/p&gt;
</description>
    <pubDate>2016-09-30T19:30:19-04:00</pubDate>
    <link>http://hunleyd.github.io/Functional-Blog-Archives/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Functional-Blog-Archives/</guid>
    
     <category>general</category>
    
   </item>
  
   <item>
    <title>Where Not To Put Your Tablespaces</title>
    <description>&lt;p&gt;From the PostgreSQL &lt;a href=&quot;https://www.postgresql.org/docs/current/static/manage-ag-tablespaces.html&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tablespaces in PostgreSQL allow database administrators to define locations in the file system where the files representing database objects can be stored. Once created, a tablespace can be referred to by name when creating database objects.&lt;/p&gt;

&lt;p&gt;By using tablespaces, an administrator can control the disk layout of a PostgreSQL installation. This is useful in at least two ways. First, if the partition or volume on which the cluster was initialized runs out of space and cannot be extended, a tablespace can be created on a different partition and used until the system can be reconfigured.&lt;/p&gt;

&lt;p&gt;Second, tablespaces allow an administrator to use knowledge of the usage pattern of database objects to optimize performance. For example, an index which is very heavily used can be placed on a very fast, highly available disk, such as an expensive solid state device. At the same time a table storing archived data which is rarely used or not performance critical could be stored on a less expensive, slower disk system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, while not as powerful as tablespaces in, say, Oracle, they do still have their uses in PostgreSQL. You can use them to make use of different filesystems, or different mount options, or different disk types and, in doing so, intelligently apply performance characteristics to subsets of your data. For example, you could put your highest volume tables in a tablespace that is mounted from SSDs while the rest of your db is mounted from spinning rust.&lt;/p&gt;

&lt;p&gt;Sounds decent, right? Now you before you go off and be &amp;quot;clever&amp;quot; and create an SSD-backed mountpoint for your new tablespace, understand that there are places you &lt;em&gt;should not&lt;/em&gt; create the tablespace. You shouldn&amp;#39;t create tablespaces on any kind of ephemeral storage, for example on a &lt;code&gt;tmpfs&lt;/code&gt; or a &lt;code&gt;ramfs&lt;/code&gt; or similar. &lt;em&gt;You also should not create your new tablespaces under $PGDATA&lt;/em&gt;. Yes, I&amp;#39;m aware there is &lt;code&gt;$PGDATA/pg_tblspc&lt;/code&gt; but that directory is &lt;em&gt;not for you&lt;/em&gt;. The system will auto-populate that directory with pointers to the real location of your tablespaces!&lt;/p&gt;

&lt;p&gt;So what happens when you create a tablespace inside $PGDATA? Let&amp;#39;s find out. First, we&amp;#39;ll create the directory for the tablespace:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;bash
doug.hunley ~ $ mkdir $PGDATA/tablespaces
doug.hunley ~ $ cd $PGDATA/tablespaces
doug.hunley ~/pgdata/tablespaces $ pwd
/Users/doug.hunley/pgdata/tablespaces
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/abe0d33a02ae2d5ee515f7f0261d000c.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And we see that nothing bad has happened yet. So, let&amp;#39;s pop over into &lt;code&gt;psql&lt;/code&gt; and actually create the tablespace:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;sql
(doug.hunley@[local]:5432/doug.hunley) # CREATE TABLESPACE ts1 LOCATION &amp;amp;#39;/Users/doug.hunley/pgdata/tablespaces&amp;amp;#39;;
WARNING:  42P17: tablespace location should not be inside the data directory
LOCATION:  CreateTableSpace, tablespace.c:295
CREATE TABLESPACE
Time: 7.797 ms
(doug.hunley@[local]:5432/doug.hunley) #
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/dba03610d0181abe363378ccaedafb98.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We get a warning (not an error, for some reason) but it works and all appears fine. Now you can spend minutes/days/months/years using your new tablespace and never notice that you&amp;#39;ve got a problem. So where does the problem come in? &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try to make a backup of our cluster:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;bash
doug.hunley ~ $ pg_basebackup -D pgdata2 -Fp -R -Xs -c fast -l &amp;amp;#39;clone for slave&amp;amp;#39; -P -v
transaction log start point: 2/17000028 on timeline 1
pg_basebackup: directory &amp;amp;quot;/Users/doug.hunley/pgdata/tablespaces&amp;amp;quot; exists but is not empty
doug.hunley ~ $
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/hunleyd/d55de865904c475ce0099eb03732251b.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;There it is.&lt;/p&gt;

&lt;p&gt;When creating the backup, it tries to ensure the tablespace location is the same, but then it won&amp;#39;t write to a non-empty directory. My example is two different $PGDATA locations on the same box, but the issue is the same when using different machines because &lt;code&gt;pg_basebackup&lt;/code&gt; backs up &lt;em&gt;everything&lt;/em&gt; in $PGDATA which means your tablespace directory gets cloned before it gets to the actual cloning of the data in the tablespace so you end up with &amp;quot;stuff&amp;quot; in the dir, making it non-empty. Which gives you the same error and output.&lt;/p&gt;

&lt;p&gt;OK, so it breaks backups. I can work around that by using another backup method. What else?&lt;/p&gt;

&lt;p&gt;How about using &lt;code&gt;pg_upgrade&lt;/code&gt; to do an upgrade? No matter if you run in &lt;code&gt;link&lt;/code&gt; mode or not, &lt;code&gt;pg_upgrade&lt;/code&gt; &lt;em&gt;will not move&lt;/em&gt; your tablespace location. So you may have &lt;code&gt;~/pgdata95&lt;/code&gt; and &lt;code&gt;~/pgdata96&lt;/code&gt; after the upgrade, but your tablespaces &lt;em&gt;are still in&lt;/em&gt; &lt;code&gt;~/pgdata95/tablespaces&lt;/code&gt;. So, as per the &lt;a href=&quot;https://www.postgresql.org/docs/current/static/pgupgrade.html&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once you are satisfied with the upgrade, you can delete the old cluster&amp;#39;s data directories by running the script mentioned when pg_upgrade completes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And &lt;em&gt;boom&lt;/em&gt; you&amp;#39;ve just deleted your tablespaces off disk. Congratulations!&lt;/p&gt;

&lt;p&gt;So there you have it. Two very good reasons to not create tablespaces inside $PGDATA. Please, don&amp;#39;t do this. Everyone who admins that cluster going forward will thank you.&lt;/p&gt;
</description>
    <pubDate>2016-08-24T07:55:12-04:00</pubDate>
    <link>http://hunleyd.github.io/Where-Not-To-Put-Your-Tablespaces/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Where-Not-To-Put-Your-Tablespaces/</guid>
    
     <category>postgresql</category>
    
   </item>
  
   <item>
    <title>Making use of gists</title>
    <description>&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-5yjV3rrAvHk/U6Gm4-prTPI/AAAAAAAAJf4/7HXcjGxXGxI/s1600/logo_github_gist.png&quot; align=right border=0 width=218 height=59&gt; After stumbling upon an example of how to do so, I&amp;#39;ve converted all my existing blog posts to use GitHub Gists instead of inline code blocks. It gives me added functionality, and reduces the size of the blog pages as well. Might as well use every GitHub feature I can since I&amp;#39;ve chosen that platform for hosting my blog, right? :)&lt;/p&gt;
</description>
    <pubDate>2016-06-19T11:42:19-04:00</pubDate>
    <link>http://hunleyd.github.io/Making-use-of-gists/</link>
    <guid isPermaLink="true">http://hunleyd.github.io/Making-use-of-gists/</guid>
    
     <category>general</category>
    
     <category>blog</category>
    
     <category>github</category>
    
   </item>
  
 </channel>
</rss>
