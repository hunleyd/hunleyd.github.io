<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed/by_tag/technology.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-08-16T14:53:14-04:00</updated><id>/feed/by_tag/technology.xml</id><title type="html">Doug’s Dabblings</title><subtitle>A collection of thoughts on things in my life that I&apos;m experiencing, playing with, or suffering through. Mostly tech related, but sometimes not.</subtitle><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><entry><title type="html">Generating DNS noise</title><link href="/2021/08/14/Generating-DNS-noise/" rel="alternate" type="text/html" title="Generating DNS noise" /><published>2021-08-14T12:27:09-04:00</published><updated>2021-08-14T12:27:09-04:00</updated><id>/2021/08/14/Generating-DNS-noise</id><content type="html" xml:base="/2021/08/14/Generating-DNS-noise/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt; is one of those thing
most people never think about. It’s one of those things in the background that
quietly does its job and no one pays it no mind. Which is why it’s surprising
to people when they discover that if their DNS traffic can be logged, a very
informative picture of them can be created.&lt;/p&gt;

&lt;p&gt;To combat this user fingerprinting/tracking, enhancements to DNS like &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_over_HTTPS&quot;&gt;DNS over
HTTPS&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_over_TLS&quot;&gt;DNS over
TLS&lt;/a&gt; come into existence. And
while I’m not knocking those solutions, I would like to point out that the
endpoint &lt;em&gt;still knows what lookups you performed&lt;/em&gt;. Unfortunately, there isn’t
really any way currently to ask a server ‘hey, whats the IP address for
google.com’’ and not have the other end know that you asked for Google’s
website. It’s literally the nature of the task for the other end to know all
the websites you asked for name resolution of.&lt;/p&gt;

&lt;p&gt;So what can a person do to make it harder for the other end to create a useful
picture of your surfing habits? Well, data is only as useful as it is clean.
If you have a list of 1000 DNS requests from the user, then you can be fairly
certain where that user was surfing (more technically, where the source IP was
surfing, but let’s not get pedantic). However, if you had a list of 1000000 DNS
requests, of which 1000 were the original legitimate DNS requests, and the
remaining 999000 were randomly generated by a process, then how easily could
you determine where the user was actually surfing? Essentially, you’ve reduced
the Signal-to-Noise so low that the signal is ‘lost’.&lt;/p&gt;

&lt;p&gt;With this goal in mind, I set out to introduce some noise into my DNS requests
as my weekend project this weekend. It turned out to be easier than I expected
thanks to some existing work by others (always stand on other’s shoulders when
you can). The first thing I did was clone down a copy of
&lt;a href=&quot;https://github.com/1tayH/noisy&quot;&gt;noisy&lt;/a&gt;. After playing with it a bit, I felt
like it was a decent base, but I didn’t care for the default “root_urls” (The
Pirate Bay? Really? I don’t need my ISP sending me cease-and-desist letters,
thank you), I didn’t think there were enough “root_urls”, and I didn’t like
that the “root_urls” were never updated. Thankfully, Cisco has a project
called &lt;a href=&quot;https://umbrella.cisco.com/blog/cisco-umbrella-1-million&quot;&gt;Umbrella&lt;/a&gt;
that seems like a good fit for all three concerns.&lt;/p&gt;

&lt;p&gt;At this point, it was just a matter of gluing all these pieces together.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; later, and it was time to start working. The first thing I did was
create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/noisy&lt;/code&gt; to hold my modified config and to provide a working
directory for the daemon. Daemon, you say? Yup, for the second step, we create
a systemd service file to run our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noise&lt;/code&gt; process. The
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/system/noisy.service&lt;/code&gt; file ends up looking like:&lt;/p&gt;

&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Simple random DNS, HTTP/S internet traffic noise generator

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/etc/noisy
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/python /srv/repos/noisy/noisy.py --config /etc/noisy/config.json
&lt;span class=&quot;nt&quot;&gt;SyslogIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;noisy

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this incredibly simple setup in place, systemd will launch the Python
script in our copy of the repo (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/srv/repos/noisy&lt;/code&gt; on my system), use the
config file I write in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/noisy&lt;/code&gt;, and will log to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journald&lt;/code&gt; while
identifying itself as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noisy&lt;/code&gt; in the journal.&lt;/p&gt;

&lt;p&gt;Now we just need to write our config file to use the hosts from Umbrella.
Thankfully, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noisy&lt;/code&gt; uses JSON for its config file, so rewriting it is trivial.
I created a Bash script to handle this for me:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /etc/noisy/top-1m.csv.zip /etc/noisy/top-1m.csv.zip.old

wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /etc/noisy/top-1m.csv.zip http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip

unzip &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /etc/noisy &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /etc/noisy/top-1m.csv.zip

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/noisy/config.json
{
        &quot;max_depth&quot;: 25,
        &quot;min_sleep&quot;: 3,
        &quot;max_sleep&quot;: 6,
        &quot;timeout&quot;: false,
        &quot;root_urls&quot;: [
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/noisy/top-1m.csv | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;url&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://medium.com&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/noisy/config.json
        ],
        &quot;blacklisted_urls&quot;: [
                &quot;https://t.co&quot;,
                &quot;t.umblr.com&quot;,
                &quot;messenger.com&quot;,
                &quot;itunes.apple.com&quot;,
                &quot;l.facebook.com&quot;,
                &quot;bit.ly&quot;,
                &quot;mediawiki&quot;,
                &quot;.css&quot;,
                &quot;.ico&quot;,
                &quot;.xml&quot;,
                &quot;intent/tweet&quot;,
                &quot;twitter.com/share&quot;,
                &quot;dialog/feed?&quot;,
                &quot;.json&quot;,
                &quot;zendesk&quot;,
                &quot;clickserve&quot;,
                &quot;.png&quot;,
                &quot;.iso&quot;
        ],
        &quot;user_agents&quot;: [
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /srv/repos/noisy/config.json|jq .user_agents | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; +2 &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;}&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/^M//&apos;&lt;/span&gt; /etc/noisy/config.json

systemctl restart noisy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script moves the previously downloaded Umbrella file out of the way,
downloads the latest version from S3, and unzips it. This gives us a CSV file
that we’ll use in a moment. The script then starts writing the config file by
setting some defaults and starting the ‘root_urls’ key. We then look over
every line in the CSV file, and pull the URL from the 2&lt;sup&gt;nd&lt;/sup&gt; field. We
prepend ‘http://’ to the URL and write the result out to our config file. To
close out the ‘root_urls’ section, we write &lt;a href=&quot;https://medium.com&quot;&gt;medium.com&lt;/a&gt;
to it (just to always have a known quantity as the ‘end marker’ if I need to
debug anything). Up next, we copy over the ‘blacklisted_urls’ keys from the
default config, and finally we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; to pull all the ‘user_agents’ into our
config. Because Cisco uses DOS line-endings, we run a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; on the resulting
file to remove these and we’re good to go. I’m sure there’s a “better” way to do
all this, but it wasn’t worth optimizing for now, imho.&lt;/p&gt;

&lt;p&gt;Now that we’ve got our file in shape, we tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; to restart the daemon
and we’re off to the races, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journalctl&lt;/code&gt; shows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Aug 14 17:09:02 nuc noisy[240416]: INFO:root:Visiting https://www.potpourrigift.com
Aug 14 17:09:07 nuc noisy[240416]: INFO:root:Visiting https://www.potpourrigift.com/ShopCategory.aspx?ID=320,362&amp;amp;ITEMS=RE9032%7CR0D067%7CR82102%7CRD9008&amp;amp;HPLoc=MB18
Aug 14 17:09:13 nuc noisy[240416]: INFO:root:Visiting
https://www.potpourrigift.com/CustomerService.aspx?page=Free+Catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now I’m sure my ISP hates me ;)&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="geek" /><category term="linux" /><category term="howto" /><category term="networking" /><category term="technology" /><summary type="html">DNS is one of those thing most people never think about. It’s one of those things in the background that quietly does its job and no one pays it no mind. Which is why it’s surprising to people when they discover that if their DNS traffic can be logged, a very informative picture of them can be created.</summary></entry><entry><title type="html">Ricing it up</title><link href="/2021/07/31/Ricing-it-up/" rel="alternate" type="text/html" title="Ricing it up" /><published>2021-07-31T05:12:54-04:00</published><updated>2021-07-31T05:12:54-04:00</updated><id>/2021/07/31/Ricing-it-up</id><content type="html" xml:base="/2021/07/31/Ricing-it-up/">&lt;p&gt;One of the reasons that I find myself going back to Gentoo is that you compile the entire system &lt;em&gt;for your hardware&lt;/em&gt; which, in theory, leads to the best performance possible. So the first task that I undertook when switching the NUC over to it was to figure out what compile options ClearLinux uses. Once I had figured those settings out, I then decided to use LTO optimization for all packages that support it. However, I didn’t want to use the &lt;a href=&quot;https://github.com/gentoo-mirror/lto-overlay&quot;&gt;LTO overlay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After doing a lot of digging around and some experimentation, I finally
settled on the following configuration:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/make.conf
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-march=skylake -mtune=skylake -O3 -pipe -w -falign-functions=32&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -fgraphite-identity -floop-nest-optimize -floop-parallelize-all&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -flto=auto -flto-partition=one -fuse-linker-plugin&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHOST&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;x86_64-pc-linux-gnu&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CPU_FLAGS_X86&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt rdrand sse sse2 sse3 sse4_1 sse4_2 ssse3&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CXXFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS}&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LDFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-Wl,-O3 -Wl,--sort-common -Wl,--as-needed&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I start with a base CFLAGS, then I add Graphite optimizations,
and finally the LTO optimizations are added. Occasionally, LTO will cause
undefined symbols and the build will fails, so for that I have:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/env/cflags-ffat-lto-objects
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -ffat-lto-objects&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And occasionally a package just won’t compile with LTO, so that I use:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/env/cflags-fno-lto
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-march=skylake -mtune=skylake -O3 -pipe -w -falign-functions=32&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -fgraphite-identity -floop-nest-optimize -floop-parallelize-all&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CXXFLAGS&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever I run into a package that has compile issues, I simply create a file
for it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/portage/package.env&lt;/code&gt; that looks like:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package_atom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cflags&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;ffat&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;lto&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package_atom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cflags&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;fno&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;lto&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This little setup has, so far, worked like a charm for me. Out of the 63
packages in my world file, only 12 need an env file to compile properly on my
~amd64 install. And everything feels snappy during my day to day. I’m quite
pleased.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="linux" /><category term="gentoo" /><category term="technology" /><summary type="html">One of the reasons that I find myself going back to Gentoo is that you compile the entire system for your hardware which, in theory, leads to the best performance possible. So the first task that I undertook when switching the NUC over to it was to figure out what compile options ClearLinux uses. Once I had figured those settings out, I then decided to use LTO optimization for all packages that support it. However, I didn’t want to use the LTO overlay.</summary></entry></feed>