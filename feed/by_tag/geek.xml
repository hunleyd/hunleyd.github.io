<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed/by_tag/geek.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-08-25T16:16:01-04:00</updated><id>/feed/by_tag/geek.xml</id><title type="html">Doug’s Dabblings</title><subtitle>A collection of thoughts on things in my life that I&apos;m experiencing, playing with, or suffering through. Mostly tech related, but sometimes not.</subtitle><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><entry><title type="html">Generating DNS noise</title><link href="/2021/08/14/Generating-DNS-noise/" rel="alternate" type="text/html" title="Generating DNS noise" /><published>2021-08-14T12:27:09-04:00</published><updated>2021-08-14T12:27:09-04:00</updated><id>/2021/08/14/Generating-DNS-noise</id><content type="html" xml:base="/2021/08/14/Generating-DNS-noise/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt; is one of those thing
most people never think about. It’s one of those things in the background that
quietly does its job and no one pays it no mind. Which is why it’s surprising
to people when they discover that if their DNS traffic can be logged, a very
informative picture of them can be created.&lt;/p&gt;

&lt;p&gt;To combat this user fingerprinting/tracking, enhancements to DNS like &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_over_HTTPS&quot;&gt;DNS over
HTTPS&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_over_TLS&quot;&gt;DNS over
TLS&lt;/a&gt; come into existence. And
while I’m not knocking those solutions, I would like to point out that the
endpoint &lt;em&gt;still knows what lookups you performed&lt;/em&gt;. Unfortunately, there isn’t
really any way currently to ask a server ‘hey, whats the IP address for
google.com’’ and not have the other end know that you asked for Google’s
website. It’s literally the nature of the task for the other end to know all
the websites you asked for name resolution of.&lt;/p&gt;

&lt;p&gt;So what can a person do to make it harder for the other end to create a useful
picture of your surfing habits? Well, data is only as useful as it is clean.
If you have a list of 1000 DNS requests from the user, then you can be fairly
certain where that user was surfing (more technically, where the source IP was
surfing, but let’s not get pedantic). However, if you had a list of 1000000 DNS
requests, of which 1000 were the original legitimate DNS requests, and the
remaining 999000 were randomly generated by a process, then how easily could
you determine where the user was actually surfing? Essentially, you’ve reduced
the Signal-to-Noise so low that the signal is ‘lost’.&lt;/p&gt;

&lt;p&gt;With this goal in mind, I set out to introduce some noise into my DNS requests
as my weekend project this weekend. It turned out to be easier than I expected
thanks to some existing work by others (always stand on other’s shoulders when
you can). The first thing I did was clone down a copy of
&lt;a href=&quot;https://github.com/1tayH/noisy&quot;&gt;noisy&lt;/a&gt;. After playing with it a bit, I felt
like it was a decent base, but I didn’t care for the default “root_urls” (The
Pirate Bay? Really? I don’t need my ISP sending me cease-and-desist letters,
thank you), I didn’t think there were enough “root_urls”, and I didn’t like
that the “root_urls” were never updated. Thankfully, Cisco has a project
called &lt;a href=&quot;https://umbrella.cisco.com/blog/cisco-umbrella-1-million&quot;&gt;Umbrella&lt;/a&gt;
that seems like a good fit for all three concerns.&lt;/p&gt;

&lt;p&gt;At this point, it was just a matter of gluing all these pieces together.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; later, and it was time to start working. The first thing I did was
create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/noisy&lt;/code&gt; to hold my modified config and to provide a working
directory for the daemon. Daemon, you say? Yup, for the second step, we create
a systemd service file to run our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noise&lt;/code&gt; process. The
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/system/noisy.service&lt;/code&gt; file ends up looking like:&lt;/p&gt;

&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Simple random DNS, HTTP/S internet traffic noise generator

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/etc/noisy
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/python /srv/repos/noisy/noisy.py --config /etc/noisy/config.json
&lt;span class=&quot;nt&quot;&gt;SyslogIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;noisy

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this incredibly simple setup in place, systemd will launch the Python
script in our copy of the repo (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/srv/repos/noisy&lt;/code&gt; on my system), use the
config file I write in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/noisy&lt;/code&gt;, and will log to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journald&lt;/code&gt; while
identifying itself as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noisy&lt;/code&gt; in the journal.&lt;/p&gt;

&lt;p&gt;Now we just need to write our config file to use the hosts from Umbrella.
Thankfully, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noisy&lt;/code&gt; uses JSON for its config file, so rewriting it is trivial.
I created a Bash script to handle this for me:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /etc/noisy/top-1m.csv.zip /etc/noisy/top-1m.csv.zip.old

wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /etc/noisy/top-1m.csv.zip http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip

unzip &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /etc/noisy &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /etc/noisy/top-1m.csv.zip

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/noisy/config.json
{
        &quot;max_depth&quot;: 25,
        &quot;min_sleep&quot;: 3,
        &quot;max_sleep&quot;: 6,
        &quot;timeout&quot;: false,
        &quot;root_urls&quot;: [
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/noisy/top-1m.csv | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;url&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://medium.com&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/noisy/config.json
        ],
        &quot;blacklisted_urls&quot;: [
                &quot;https://t.co&quot;,
                &quot;t.umblr.com&quot;,
                &quot;messenger.com&quot;,
                &quot;itunes.apple.com&quot;,
                &quot;l.facebook.com&quot;,
                &quot;bit.ly&quot;,
                &quot;mediawiki&quot;,
                &quot;.css&quot;,
                &quot;.ico&quot;,
                &quot;.xml&quot;,
                &quot;intent/tweet&quot;,
                &quot;twitter.com/share&quot;,
                &quot;dialog/feed?&quot;,
                &quot;.json&quot;,
                &quot;zendesk&quot;,
                &quot;clickserve&quot;,
                &quot;.png&quot;,
                &quot;.iso&quot;
        ],
        &quot;user_agents&quot;: [
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /srv/repos/noisy/config.json|jq .user_agents | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; +2 &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;}&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/^M//&apos;&lt;/span&gt; /etc/noisy/config.json

systemctl restart noisy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script moves the previously downloaded Umbrella file out of the way,
downloads the latest version from S3, and unzips it. This gives us a CSV file
that we’ll use in a moment. The script then starts writing the config file by
setting some defaults and starting the ‘root_urls’ key. We then look over
every line in the CSV file, and pull the URL from the 2&lt;sup&gt;nd&lt;/sup&gt; field. We
prepend ‘http://’ to the URL and write the result out to our config file. To
close out the ‘root_urls’ section, we write &lt;a href=&quot;https://medium.com&quot;&gt;medium.com&lt;/a&gt;
to it (just to always have a known quantity as the ‘end marker’ if I need to
debug anything). Up next, we copy over the ‘blacklisted_urls’ keys from the
default config, and finally we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; to pull all the ‘user_agents’ into our
config. Because Cisco uses DOS line-endings, we run a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; on the resulting
file to remove these and we’re good to go. I’m sure there’s a “better” way to do
all this, but it wasn’t worth optimizing for now, imho.&lt;/p&gt;

&lt;p&gt;Now that we’ve got our file in shape, we tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; to restart the daemon
and we’re off to the races, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journalctl&lt;/code&gt; shows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Aug 14 17:09:02 nuc noisy[240416]: INFO:root:Visiting https://www.potpourrigift.com
Aug 14 17:09:07 nuc noisy[240416]: INFO:root:Visiting https://www.potpourrigift.com/ShopCategory.aspx?ID=320,362&amp;amp;ITEMS=RE9032%7CR0D067%7CR82102%7CRD9008&amp;amp;HPLoc=MB18
Aug 14 17:09:13 nuc noisy[240416]: INFO:root:Visiting
https://www.potpourrigift.com/CustomerService.aspx?page=Free+Catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now I’m sure my ISP hates me ;)&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="geek" /><category term="linux" /><category term="howto" /><category term="networking" /><category term="technology" /><summary type="html">DNS is one of those thing most people never think about. It’s one of those things in the background that quietly does its job and no one pays it no mind. Which is why it’s surprising to people when they discover that if their DNS traffic can be logged, a very informative picture of them can be created.</summary></entry><entry><title type="html">It’s Podman, man</title><link href="/2020/07/30/It-s-Podman-man/" rel="alternate" type="text/html" title="It’s Podman, man" /><published>2020-07-30T08:44:51-04:00</published><updated>2020-07-30T08:44:51-04:00</updated><id>/2020/07/30/It-s-Podman-man</id><content type="html" xml:base="/2020/07/30/It-s-Podman-man/">&lt;p&gt;As mentioned (very) briefly in other posts, I run &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt; as the ‘control hub’ for all my “smart” devices in my home. I originally ran it via their ‘HASSOS’ Docker image but was never really happy with it. So when I most recently rebuilt my NUC, I decided to give this Podman thing a look. And so far, I seem to like it better. I’m still not entirely sold on this whole container bullshit, but whatever ;)&lt;/p&gt;

&lt;p&gt;When I first decided to use Podman, the install directions for Ubuntu on the Podman &lt;a href=&quot;https://podman.io/getting-started/installation.html&quot;&gt;site&lt;/a&gt; were not updated to point to the proper Apt source, and I had to dig around on various GitHub issues for the project before finding the correct info:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /etc/os-release
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/ /&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/Release.key | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;podman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are now on the site and they work for today but if you’re visiting this post in the future it might have changed.&lt;/p&gt;

&lt;p&gt;So anyway, after installing and playing with Podman for a while, I ended up deciding to run three containers (pods?) under rootfull Podman (technically, two of them could run rootless, but I’d rather be consistent). My next step was to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podman-generate-systemd&lt;/code&gt; to write some systemd service scripts for me. I can’t recall exactly why now, but I ended up tweaking the service files by hand and they now look like this:&lt;/p&gt;

&lt;p&gt;Home Assistant:&lt;/p&gt;
&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;homeassistant system monitor Podman container

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nt&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30s
&lt;span class=&quot;nt&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm homeassistant
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/podman run --name=homeassistant -v /root/podman/hassio:/config --net=host -v /proc
&lt;span class=&quot;nt&quot;&gt;:/host/proc:ro -v /sys:/host/sys:ro --cap-add SYS_PTRACE --security-opt apparmor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;unconfined -v /:/mnt
 &lt;span class=&quot;err&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/home:/srv&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;homeassistant/home-assistant&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop homeassistant
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm homeassistant
&lt;span class=&quot;nt&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop homeassistant
&lt;span class=&quot;nt&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;never
&lt;span class=&quot;nt&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Netdata:&lt;/p&gt;
&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;netdata system monitor Podman container

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nt&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30s
&lt;span class=&quot;nt&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm netdata
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/podman run --name netdata -p 19999:19999 -v /proc:/host/proc:ro -v /sys:/host/sys:ro -v /root/podman/netdata:/etc/netdata --cap-add SYS_PTRACE --security-opt apparmor=unconfined netdata/netdata
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop netdata
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm netdata
&lt;span class=&quot;nt&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop netdata
&lt;span class=&quot;nt&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;never
&lt;span class=&quot;nt&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BOINC:&lt;/p&gt;
&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;boinc system monitor Podman container

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nt&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30s
&lt;span class=&quot;nt&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm boinc
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/podman run --name boinc --net=host -v /root/podman/boinc:/var/lib/boinc --security-opt apparmor=unconfined -e BOINC_GUI_RPC_PASSWORD=&quot;123&quot; -e BOINC_CMD_LINE_OPTIONS=&quot;--allow_remote_gui_rpc&quot; boinc/client
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop boinc
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm boinc
&lt;span class=&quot;nt&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop boinc
&lt;span class=&quot;nt&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;never
&lt;span class=&quot;nt&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s been running like this now for a while and I’m pretty happy with things. I was eagerly watching the planned Podman feature that would self-update the pods, but I think I’m gonna leave that process manual for now since Home Assistant has been pushing a lot of ‘breaking changes’ lately and I need to review my configs before updating anyway.&lt;/p&gt;

&lt;p&gt;In any case, I kinda like Podman for when I need to use a container. So if you’re running Docker at home and don’t have a specific need for Docker itself, see if Podman will meet your needs.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="geek" /><category term="linux" /><summary type="html">As mentioned (very) briefly in other posts, I run Home Assistant as the ‘control hub’ for all my “smart” devices in my home. I originally ran it via their ‘HASSOS’ Docker image but was never really happy with it. So when I most recently rebuilt my NUC, I decided to give this Podman thing a look. And so far, I seem to like it better. I’m still not entirely sold on this whole container bullshit, but whatever ;)</summary></entry><entry><title type="html">Locking it down</title><link href="/2018/06/18/Locking-it-down/" rel="alternate" type="text/html" title="Locking it down" /><published>2018-06-18T08:45:02-04:00</published><updated>2018-06-18T08:45:02-04:00</updated><id>/2018/06/18/Locking-it-down</id><content type="html" xml:base="/2018/06/18/Locking-it-down/">&lt;p&gt;I finally saved up and bought myself a smart lock at the end of April. I ended up getting the &lt;a href=&quot;https://smile.amazon.com/gp/product/B0752V8D8D&quot;&gt;August Smart Lock Pro&lt;/a&gt; with the Connect module. Now that I’ve used it for a month and a half, I feel like I can finally review it.&lt;/p&gt;

&lt;p&gt;TL;DR I love this lock.&lt;/p&gt;

&lt;p&gt;Honestly, the hardest part of this whole process was picking the lock to buy. I looked at the August lock, I looked at the Kwikset Bluetooth lock, I even looked at the Nest lock and debating waiting for its release. In the end, I chose the August for two reasons: it integrates with Google Home natively (no ‘talk to August’ bullshit) and it uses the existing lock’s keys so my landlord can’t complain.&lt;/p&gt;

&lt;p&gt;Installing the lock was stupid simple. You are directed to download their app for your phone, create an account, and then it gives you full-screen step-by-step directions. There’s nothing unusual about this deadlock, so if you’ve ever changed one before, you know how to do this. You’ll need a screwdriver and maybe 10 minutes.&lt;/p&gt;

&lt;p&gt;Installation is basically 4 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remove the old back on the deadbolt&lt;/li&gt;
  &lt;li&gt;Find the correct shaft adaptor&lt;/li&gt;
  &lt;li&gt;Install the new August back&lt;/li&gt;
  &lt;li&gt;Connect to the wifi&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don’t leave the house very often, if I’m honest, but the occasions I have since installing this have been very nice. I leave, the door locks (and thanks to other integrations my Blink cameras turn on); I return, the door unlocks (and the cameras turn off). I don’t have to carry a key with me. I don’t have to empty a hand to fish out my key to unlock the door. When I go to bed at night, I just tell Google to lock the door. The only minor annoyance is that Google won’t voice unlock the door (for security reasons).&lt;/p&gt;

&lt;p&gt;I’ve yet to use the app to give anyone a ‘temporary key’ but I have used the app to check on (and change) the lock status. I’ve also used the app to update the firmware on the lock.&lt;/p&gt;

&lt;p&gt;If you’re considering a smart lock, I highly recommend you look at the August Pro.&lt;/p&gt;

&lt;p&gt;★★★★★&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="geek" /><category term="smarthome" /><category term="review" /><summary type="html">I finally saved up and bought myself a smart lock at the end of April. I ended up getting the August Smart Lock Pro with the Connect module. Now that I’ve used it for a month and a half, I feel like I can finally review it.</summary></entry><entry><title type="html">Routing email through GMail on OSX</title><link href="/2016/11/15/Routing-email-through-GMail-on-OSX/" rel="alternate" type="text/html" title="Routing email through GMail on OSX" /><published>2016-11-15T05:51:00-05:00</published><updated>2016-11-15T05:51:00-05:00</updated><id>/2016/11/15/Routing-email-through-GMail-on-OSX</id><content type="html" xml:base="/2016/11/15/Routing-email-through-GMail-on-OSX/">&lt;p&gt;&lt;img src=&quot;http://www.postfix.org/mysza.gif&quot; class=&quot;lleader&quot; /&gt;Like most geeks, I have scripts that I’ve written that I like to have run from cron on a regular basis. And since the running of these scripts might be in the middle of the night, I like for them to email their output to me so I know if they succeeded or failed. As such, I need an MTA on my computer that can actually deliver these emails to GMail. For me, this is trivial using Sendmail or SSMTP on a Linux box, but I can never remember how to do this using Postfix on OSX. So after having to Google everything to get this running once more, I’m going to commit the steps here for my future self to reference :)&lt;/p&gt;

&lt;p&gt;The first thing we’re going to do is open an iTerm and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -i&lt;/code&gt; to become root. Then we’re going to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi /etc/postfix/main.cf&lt;/code&gt; and we’re going to add/set the following:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myhostname&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;relayhost&lt;/span&gt; = [&lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;]:&lt;span class=&quot;m&quot;&gt;587&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_auth_enable&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_password_maps&lt;/span&gt;= &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;sasl_passwd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_security_options&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;noanonymous&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_mechanism_filter&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_use_tls&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have Two-Factor Auth (2FA) enabled on my Google account (you should too!), so for me, the next step is to log into Google and create an ‘app password’. Once I have that password in hand, we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi /etc/postfix/sasl_passwd&lt;/code&gt; and add:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;]:&lt;span class=&quot;m&quot;&gt;587&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;@&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;:&lt;span class=&quot;n&quot;&gt;app_passwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Secure that file by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 0600 /etc/postfix/sasl_passwd&lt;/code&gt; and then have Postfix hash it by doing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postmap /etc/postfix/sasl_passwd&lt;/code&gt;. Finally, restart Postfix:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;launchctl stop org.postfix.master
launchctl start org.postfix.master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And everything should work.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="osx" /><category term="geek" /><category term="computers" /><summary type="html">Like most geeks, I have scripts that I’ve written that I like to have run from cron on a regular basis. And since the running of these scripts might be in the middle of the night, I like for them to email their output to me so I know if they succeeded or failed. As such, I need an MTA on my computer that can actually deliver these emails to GMail. For me, this is trivial using Sendmail or SSMTP on a Linux box, but I can never remember how to do this using Postfix on OSX. So after having to Google everything to get this running once more, I’m going to commit the steps here for my future self to reference :)</summary></entry><entry><title type="html">Huawei Watch Review</title><link href="/2016/01/21/Huawei-Watch-Review/" rel="alternate" type="text/html" title="Huawei Watch Review" /><published>2016-01-21T12:00:00-05:00</published><updated>2016-01-21T12:00:00-05:00</updated><id>/2016/01/21/Huawei-Watch-Review</id><content type="html" xml:base="/2016/01/21/Huawei-Watch-Review/">&lt;p&gt;&lt;a href=&quot;http://www.gethuawei.com/buy-huawei-watch&quot;&gt;&lt;img src=&quot;https://www.androidpolice.com/wp-content/uploads/2015/09/nexus2cee_DSC09617-728x485.jpg&quot; class=&quot;lleader&quot; /&gt;&lt;/a&gt;A couple of my mates wanted me to let them know what I thought of the &lt;a href=&quot;http://www.huawei.com/en/&quot;&gt;Huawei&lt;/a&gt; Watch (hereafter, ‘H’) after upgrading from the &lt;a href=&quot;https://www.motorola.com/us/products/moto-360&quot;&gt;Moto 360&lt;/a&gt; (hereafter, 360) and spending some time getting to know the ‘H’. So here’s my thoughts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Better than the 360 in every way that counts&lt;/p&gt;

&lt;p&gt;I should probably preface this review by saying that I loved (and still love) the 360. I was excited to buy it, I was excited to see it ship to my house, I was pissed that I wasn’t at my house when it arrived (long-term gig in LA), I was proud to wear it, and I loved showing it to anyone who cared (and probably more than a few who didn’t). Having said that, the 360 I had was a Gen 1 in every sense. It was the first watch Moto had made. It was the first smartwatch Moto had made. It was the flagship Android Wear device. And the minute I got my hands on a 2&lt;sup&gt;nd&lt;/sup&gt; gen device, those things were readily apparent.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong. It’s not all sunshine and roses w/ the ‘H’. For example, charging is actually quite a bit of a sorrier state than with the 360. You see, the 360 has a standard Qi charging mechanism. So while there is a cute little official charging stand, you can make do with &lt;em&gt;any&lt;/em&gt; Qi charger you have once you figure out where to place the watch on the coil. And the official charger uses a standard, I-have-tons-of-them-all-of-the-place USB-A to USB-micro cable. The ‘H’, on the other hand, uses pogo pins to connect to it’s charger. Which means you &lt;u&gt;have&lt;/u&gt; to use a compatible charger (of which there is only one currently). Take a road trip and forget your charger? Buy another one or go without your watch. And to add to the insult, the charger cable, while having a standard USB-A plug on one end, is terminated inside the charging puck. So if the cord should go bad or isn’t long enough, too bad. You can’t use one of those USB cables from the pile in your desk drawer. Nope. Sorry. And then, of course, there’s the &lt;em&gt;act&lt;/em&gt; of charging the watch. With the 360, you simply slide it into its dock, and you’re done. Heck, after a while, you can almost lightly toss it into the charger like a game of corn hole and it will charge. Half asleep? Drunk? No problem. Tis easy. The ‘H’ on the other hand? You have to line up the pogos &lt;b&gt;exactly&lt;/b&gt; or you aren’t getting any juice. And I mean exact. Doesn’t matter if the watch and the charger look perfectly aligned and centered with each other. If the pins aren’t perfect, no juice for you! I’ve already had my share of waking up to find out the watch didn’t charge. It SUCKS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pro tip: I’ve found that hovering the ‘H’ right over the charging puck allows the magnets in them to pull them together in such a way that the puck “leaps” up and attaches to the watch with the pogo pins perfectly positioned&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So yeah, charging. The one thorn in the rose. But worth it, imho.&lt;/p&gt;

&lt;p&gt;Review: ★★★★★&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="android" /><category term="review" /><category term="geek" /><summary type="html">A couple of my mates wanted me to let them know what I thought of the Huawei Watch (hereafter, ‘H’) after upgrading from the Moto 360 (hereafter, 360) and spending some time getting to know the ‘H’. So here’s my thoughts.</summary></entry><entry><title type="html">I Have The Power</title><link href="/2016/01/16/I-Have-The-Power/" rel="alternate" type="text/html" title="I Have The Power" /><published>2016-01-16T19:00:00-05:00</published><updated>2016-01-16T19:00:00-05:00</updated><id>/2016/01/16/I-Have-The-Power</id><content type="html" xml:base="/2016/01/16/I-Have-The-Power/">&lt;p&gt;&lt;a href=&quot;https://www.snappower.com/snaprays-guidelight/&quot;&gt;&lt;img src=&quot;https://cdn.shopify.com/s/files/1/0336/9049/products/Single_GL2_white_07d7acd0-a697-4d12-8cd0-7bfbfd26d969_900x.jpg?v=1564168251&quot; class=&quot;lleader&quot; /&gt;&lt;/a&gt;A while back, I ran across a little project on &lt;a href=&quot;http://www.kickstarter.com&quot;&gt;Kickstarter&lt;/a&gt; from a company called &lt;a href=&quot;http://www.snappower.com&quot;&gt;SnapPower&lt;/a&gt;. The project was for a product called Guidelights.&lt;/p&gt;

&lt;p&gt;Now, I’m a “big boy” and don’t need a night light, but I do wander around the house after dark quite a bit and hate turning on the lights when I’m in a room for like a whole minute. So the concept of having LED lights embedded into the outlet cover and having them turn on/off based on the ambient light in the room sounded pretty cool. And the fact that there’s no wiring or anything was slick. So I ponied up and ordered some.&lt;/p&gt;

&lt;p&gt;I gotta tell you, they rock! I now have one in the upstairs hallyway, another at the bottom of the stairs, and a third on the island in the kitchen. It’s freaking perfect. Seriously. And like I said, there’s &lt;em&gt;no skill involved&lt;/em&gt;. If you can work a flat head screwdriver, you can install these!&lt;/p&gt;

&lt;p&gt;In fact, when Stephanie movies into her apartment (soonish), I’ll be outfitting her place with a few of these as well. They’re really that good,&lt;/p&gt;

&lt;p&gt;Review: ★★★★★&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.snappower.com/snappower-chargers/&quot;&gt;&lt;img src=&quot;https://www.snappower.com/wp-content/themes/enfold-child/images/charger_review.jpg&quot; class=&quot;rleader&quot; /&gt;&lt;/a&gt;As much as I love the Guidelights, I was stoked when SnapPower announced their Snap Power Chargers.&lt;/p&gt;

&lt;p&gt;I don’t know what it’s like in your household, but all four of us have smart phones, three of us have tablets, and two of us have smart watches. Someone &lt;em&gt;always&lt;/em&gt; needs to charge something. And my family is &lt;strong&gt;horrible&lt;/strong&gt; about removing their chargers from outlets when they’re done. And one person in particular has taken to unplugging whatever is “in the way” so she can charge her phone close to wherever she’s sitting! Clearly, a solution that adds USB ports and frees up electrical outlets is a solution I need to have.&lt;/p&gt;

&lt;p&gt;So I eagerly bought &lt;em&gt;five&lt;/em&gt; of these things. I installed all but one yesterday, and I gotta say it is as good of an investment as the light covers. I will be installing a few of these in Steph’s apartment also. Now, I’ll grant you that they are not “quick charge”. And there’s only one USB facing the right side of the cover instead of one on both the left and right. But I understand there’s only so much room in these things, and only so much power you can leech off the contacts. So I’m not terribly upset. It would be nice though if you could choose left or right when ordering.&lt;/p&gt;

&lt;p&gt;Honestly, I’m kinda stoked to see what this company comes up with next. Of all the random crap I’ve backed on Kickstarter, SnapPower is easily the most useful and easiest to recommend to others.&lt;/p&gt;

&lt;p&gt;Review: ★★★★✩&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="geek" /><category term="kickstarter" /><category term="review" /><summary type="html">A while back, I ran across a little project on Kickstarter from a company called SnapPower. The project was for a product called Guidelights.</summary></entry></feed>