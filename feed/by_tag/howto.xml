<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed/by_tag/howto.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-08-14T17:10:19-04:00</updated><id>/feed/by_tag/howto.xml</id><title type="html">Doug’s Dabblings</title><subtitle>A collection of thoughts on things in my life that I&apos;m experiencing, playing with, or suffering through. Mostly tech related, but sometimes not.</subtitle><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><entry><title type="html">Generating DNS noise</title><link href="/2021/08/14/Generating-DNS-noise/" rel="alternate" type="text/html" title="Generating DNS noise" /><published>2021-08-14T12:27:09-04:00</published><updated>2021-08-14T12:27:09-04:00</updated><id>/2021/08/14/Generating-DNS-noise</id><content type="html" xml:base="/2021/08/14/Generating-DNS-noise/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt; is one of those thing
most people never think about. It’s one of those things in the background that
quietly does its job and no one pays it no mind. Which is why it’s surprising
to people when they discover that if their DNS traffic can be logged, a very
informative picture of them can be created.&lt;/p&gt;

&lt;p&gt;To combat this user fingerprinting/tracking, enhancements to DNS like &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_over_HTTPS&quot;&gt;DNS over
HTTPS&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_over_TLS&quot;&gt;DNS over
TLS&lt;/a&gt; come into existence. And
while I’m not knocking those solutions, I would like to point out that the
endpoint &lt;em&gt;still knows what lookups you performed&lt;/em&gt;. Unfortunately, there isn’t
really any way currently to ask a server ‘hey, whats the IP address for
google.com’’ and not have the other end know that you asked for Google’s
website. It’s literally the nature of the task for the other end to know all
the website you asked for name resolution of.&lt;/p&gt;

&lt;p&gt;So what can a person do to make it harder for the other end to create a useful
picture of your surfing habits? Well, data is only as useful as it is clean.
If you have a list of 1000 DNS requests from the user, then you can be fairly
certain whee that user was surfing (more technically, where the source IP was
surfing, but let’s not pedantic). However, if you had a list of 1000000 DNS
requests, of which 1000 were the original legitimate DNS requests, and the
remaining 999000 were randomly generated by a process then how easily could
you determine where the user was actually surfing? Essentially, you’ve reduced
the Signal-to-Noise so low that the signal is ‘lost’.&lt;/p&gt;

&lt;p&gt;With this goal in mind, I set out to introduce some noise into my DNS requests
as my weekend project this weekend. It turned out to be easier than I expected
thanks to some existing work by others (always stand on other’s shoulders when
you can). The first thing I did was clone down a copy of
&lt;a href=&quot;https://github.com/1tayH/noisy&quot;&gt;noisy&lt;/a&gt;. After playing with it a bit, I feel
like it was a decent base, but I didn’t care for the default “root_urls” (The
Pirate Bay? Really? I don’t need my ISP sending me cease-and-desist letters,
thank you), I didn’t think there were enough “root_urls”, and I didn’t like
that the “root_urls” were never updated. Thankfully, Cisco has a project
called &lt;a href=&quot;https://umbrella.cisco.com/blog/cisco-umbrella-1-million&quot;&gt;Umbrella&lt;/a&gt;
that seems like a good fit for all thee concerns.&lt;/p&gt;

&lt;p&gt;At this point, it was just a matter of gluing all these pieces together.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; later, and it was time to start working. The first thing I did was
create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/noisy&lt;/code&gt; to hold my modified config and to provide a working
directory for the daemon. Daemon, you say? Yup, for the second step, we create
a systemd service file to run our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noise&lt;/code&gt; process. The
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/system/noisy.service&lt;/code&gt; file ends up looking like:&lt;/p&gt;

&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Simple random DNS, HTTP/S internet traffic noise generator

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/etc/noisy
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/python /srv/repos/noisy/noisy.py --config /etc/noisy/config.json
&lt;span class=&quot;nt&quot;&gt;SyslogIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;noisy

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this incredibly simple setup in place, systemd will launch the Python
script in our copy of the repo (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/srv/repos/noisy&lt;/code&gt; on my system), use the
config file I write in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/noisy&lt;/code&gt; and will log to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journald&lt;/code&gt; while
identifying itself as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noisy&lt;/code&gt; in the journal.&lt;/p&gt;

&lt;p&gt;Now we just need to write our config file to use the hosts from Umbrella.
Thankfully, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noisy&lt;/code&gt; uses JSON for its config file, so rewriting it is trivial.
I created a Bash script to handle this for me:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /etc/noisy/top-1m.csv.zip /etc/noisy/top-1m.csv.zip.old

wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /etc/noisy/top-1m.csv.zip http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip

unzip &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /etc/noisy &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /etc/noisy/top-1m.csv.zip

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/noisy/config.json
{
        &quot;max_depth&quot;: 25,
        &quot;min_sleep&quot;: 3,
        &quot;max_sleep&quot;: 6,
        &quot;timeout&quot;: false,
        &quot;root_urls&quot;: [
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/noisy/top-1m.csv | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;url&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://medium.com&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/noisy/config.json
        ],
        &quot;blacklisted_urls&quot;: [
                &quot;https://t.co&quot;,
                &quot;t.umblr.com&quot;,
                &quot;messenger.com&quot;,
                &quot;itunes.apple.com&quot;,
                &quot;l.facebook.com&quot;,
                &quot;bit.ly&quot;,
                &quot;mediawiki&quot;,
                &quot;.css&quot;,
                &quot;.ico&quot;,
                &quot;.xml&quot;,
                &quot;intent/tweet&quot;,
                &quot;twitter.com/share&quot;,
                &quot;dialog/feed?&quot;,
                &quot;.json&quot;,
                &quot;zendesk&quot;,
                &quot;clickserve&quot;,
                &quot;.png&quot;,
                &quot;.iso&quot;
        ],
        &quot;user_agents&quot;: [
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /srv/repos/noisy/config.json|jq .user_agents | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; +2 &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;}&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/^M//&apos;&lt;/span&gt; /etc/noisy/config.json

systemctl restart noisy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script moves the previously downloaded Umbrella file out of the way,
downloads the latest version from S3, and unzips it. This gives us a CSV file
that we’ll use in a moment. The script then starts writing the config file by
setting some defaults and starting the ‘root_urls’ key. We then look over
every line in the CSV file, and pull the URL from the 2&lt;sup&gt;nd&lt;/sup&gt; field. We
prepend ‘http://’ to the URL and write the result out to our config file. To
close out the ‘root_urls’ section, we right &lt;a href=&quot;https://medium.com&quot;&gt;medium.com&lt;/a&gt;
to it (just to always have a know quantity as the ‘end marker’ if I need to
debug anything). Up next we copy over the ‘blacklisted_urls’ keys from the
default config, and finally we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; to pull all the ‘user_agents’ into our
config. Because Cisco use DOS line-endings, we run a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; on the resulting
file to remove these and we’re good to go. I’m sure there’s “better” way to do
all this, but it wasn’t worth optimizing for now, imho.&lt;/p&gt;

&lt;p&gt;Now that we’ve got our file in shape, we tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; to restart the daemon
and we’re off to the races, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journalctl&lt;/code&gt; shows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Aug 14 17:09:02 nuc noisy[240416]: INFO:root:Visiting https://www.potpourrigift.com
Aug 14 17:09:07 nuc noisy[240416]: INFO:root:Visiting https://www.potpourrigift.com/ShopCategory.aspx?ID=320,362&amp;amp;ITEMS=RE9032%7CR0D067%7CR82102%7CRD9008&amp;amp;HPLoc=MB18
Aug 14 17:09:13 nuc noisy[240416]: INFO:root:Visiting
https://www.potpourrigift.com/CustomerService.aspx?page=Free+Catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now I’m sure my ISP hates me ;)&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="geek" /><category term="linux" /><category term="howto" /><category term="networking" /><category term="technology" /><summary type="html">DNS is one of those thing most people never think about. It’s one of those things in the background that quietly does its job and no one pays it no mind. Which is why it’s surprising to people when they discover that if their DNS traffic can be logged, a very informative picture of them can be created.</summary></entry><entry><title type="html">PostgreSQL Partitioning Quick Tip</title><link href="/2016/04/21/PostgresQL-Partitioning-Quick-Tip/" rel="alternate" type="text/html" title="PostgreSQL Partitioning Quick Tip" /><published>2016-04-21T05:25:32-04:00</published><updated>2016-04-21T05:25:32-04:00</updated><id>/2016/04/21/PostgresQL-Partitioning-Quick-Tip</id><content type="html" xml:base="/2016/04/21/PostgresQL-Partitioning-Quick-Tip/">&lt;p&gt;&lt;img src=&quot;http://www.habitsofmind.org/sites/default/files/helpful-tips-image-web-design-sydney.jpg&quot; class=&quot;rleader&quot; /&gt;Partitioning in PostgreSQL can be a little daunting at times. In fact, you should probably just use &lt;a href=&quot;https://github.com/keithf4/pg_partman&quot;&gt;pg_partman&lt;/a&gt; and be done with it. However, if you’re trying to learn, can’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_partman&lt;/code&gt;, or are a masochist you’ll probably be following the &lt;a href=&quot;http://www.postgresql.org/docs/current/static/ddl-partitioning.html&quot;&gt;docs&lt;/a&gt; and thinking ‘seriously? i have to create indexes on each child? why don’t they copy the indexes of the parent? why isn’t this easier?’. Here’s a little tip to make things slightly easier:&lt;/p&gt;

&lt;p&gt;Instead of creating your child tables like the docs say:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CHECK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blah&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INHERITS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create your child tables thusly:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INCLUDING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CHECK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blah&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INHERITS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and PostgeSQL &lt;em&gt;will&lt;/em&gt; copy all your indexes, primary keys, etc from the parent to the child. Which is what you wanted, right?&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="postgresql" /><category term="howto" /><summary type="html">Partitioning in PostgreSQL can be a little daunting at times. In fact, you should probably just use pg_partman and be done with it. However, if you’re trying to learn, can’t use pg_partman, or are a masochist you’ll probably be following the docs and thinking ‘seriously? i have to create indexes on each child? why don’t they copy the indexes of the parent? why isn’t this easier?’. Here’s a little tip to make things slightly easier:</summary></entry><entry><title type="html">Logical Replication with Skytools3</title><link href="/2016/04/19/Logical-Replication-With-Skytool3/" rel="alternate" type="text/html" title="Logical Replication with Skytools3" /><published>2016-04-19T09:55:11-04:00</published><updated>2016-04-19T09:55:11-04:00</updated><id>/2016/04/19/Logical-Replication-With-Skytool3</id><content type="html" xml:base="/2016/04/19/Logical-Replication-With-Skytool3/">&lt;p&gt;&lt;img src=&quot;https://cdn2.iconfinder.com/data/icons/color-svg-cloud-icons/512/cloud_refresh-512.png&quot; class=&quot;lleader&quot; /&gt; UPDATE: My coworker Richard liked this write up, and Skytools, so much he threw together a demo script. You can get it &lt;a href=&quot;https://github.com/richyen/toolbox/blob/master/pg/londiste/londiste_demo.sh&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently had to do a &lt;em&gt;near-zero downtime&lt;/em&gt; upgrade from PostgreSQL 8.4.x to PostgreSQL 9.4.x for a custmer. I couldn’t use streaming replication because of the change in major version (and because it’s simply not present in 8.x), so that left me looking at &lt;em&gt;logical replication&lt;/em&gt; options. Usually, everyone else would be thinking Slony right here. I’ve only messed with Slony a few times, but each time was a pita, and the whole thing just seemed overly complicated to me. So I decided to give Londiste a look.&lt;/p&gt;

&lt;p&gt;Londiste is part of the Skytools suite, originally developed by Skype back when they were a ‘no central node’ setup. As such, the thing was literally born to be “master-master” and assumes nodes come and go at will, so it’s got all the tools to handle bringing nodes up/down, marking them active/inactive, catching them up, etc. It’s written in Python, and uses plain text ini files for configuration.&lt;/p&gt;

&lt;p&gt;There’s really only two hurdles that I found with using Londiste. First is that if you can’t get the rpms from the &lt;a href=&quot;http://yum.postgresql.org&quot;&gt;PGDG Yum Repo&lt;/a&gt; you’re looking at compiling from Git. And second, the online documentation for it is hard to find, hard to follow, and practically no one has used it so you can’t ask RandomPostgresPerson for help.&lt;/p&gt;

&lt;p&gt;Which is exactly why I’m writing this blog post. Here’s what I needed to get me through the migration in question. I hope it helps you, should you consider using Londiste for your own replication needs. To whit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As with other logical replication tools, you must ensure that all the tables to be replicated have a valid primary key. So before you even get started, determine which tables are missing them and then pass that list to your junior DBA and have them create pkeys while you continue on:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nspname&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relname&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pg_class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pg_namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relnamespace&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relkind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pg_constraint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conrelid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;p&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nspname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ARRAY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&apos;pg_catalog&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&apos;sys&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&apos;dbo&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&apos;information_schema&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;On the PostgreSQL 9.4.x server that will be receiving the replicated data, we need to ensure that all roles are pre-created. We want all ownerships and grants to be identical when we’re done, right? You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_dumpall -g&lt;/code&gt; on the PostgreSQL 8.4.x to get a listing of roles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Again, like Slony, we should pre-build the schema on the PostgreSQL 9.4.x server. I &lt;em&gt;think&lt;/em&gt; you can actually get Londiste to do this for you as part of the replication, but I couldn’t find anything online for sure, and I didn’t have time to add more experimentation here (we’re on the customer’s dime here, remember). So, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_dump&lt;/code&gt; over the network and pipe it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_restore&lt;/code&gt; to transfer the schema thusly:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pg_dump &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-Fc&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; IPofOldServer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  myapp | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
pg_restore &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; template1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Install Skytools on the PostgreSQL 9.4.x server using the PGDG repo:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  skytools-94 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  skytools-94-modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Install Skytools from source on the PostgreSQL 8.4.x server:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  python-devel &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  asciidoc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  xmlto &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  postgresql-devel
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git://github.com/markokr/skytools.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;skytools
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git submodule init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git submodule update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./autogen.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Restart the PostgreSQL 8.4.x cluster to load the new libs and modules&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we configure the Londiste ticker. Note, we have &lt;em&gt;trust&lt;/em&gt; setup for the postgres user in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_hba.conf&lt;/code&gt; so there is no password= in the connection strings. Adjust to meet your setup:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pv&lt;/span&gt; ~postgres/londiste-config/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;log,pid&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~postgres/londiste-config
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; ticker.ini
  [pgqd]
  base_connstr = user=postgres host=IPofOldServer
  database_list = myapp
  logfile = log/ticker.log
  pidfile = pid/ticker.pid
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Start up the ticker, to provide the replication “heartbeat” by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pgqd -d ticker.ini&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ticker.log&lt;/code&gt; to ensure there are no warnings or errors! You can stop the ticker with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pgqd -s ticker.ini&lt;/code&gt; while you fix things.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, we tell Londiste about the master node (same note applies about the lack of password in the connection string):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~postgres/londiste-config
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; master.ini
  [londiste3]
  db = user=postgres host=IPofOldServer dbname=myapp
  queue_name = myappq
  loop_delay = 0.5
  logfile = log/master.log
  pidfile = pid/master.pid
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;We have to actually create the master node as the root node by doing:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;londiste3 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  master.ini &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  create-root &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  master &lt;span class=&quot;s1&quot;&gt;&apos;user=postgres host=IPofOldServer dbname=myapp&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Check the master.log to see if you have a line like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INFO Node &quot;master&quot; initialized for queue &quot;myappq&quot; with type &quot;root&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, spin up the master’s replication worker process by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 -d master.ini worker&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we configure our slave node (same note applies about the lack of password in the connection string):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~postgres/londiste-config
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; slave.ini
  [londiste3]
  db = user=postgres host=127.0.0.1 dbname=myapp
  queue_name = myappq
  loop_delay = 0.5
  logfile = log/slave.log
  pidfile = pid/slave.pid
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Like the master, we have to create the slave node. I created it as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leaf&lt;/code&gt; but I could have created it as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;branch&lt;/code&gt; if we we’re going to cascade replication:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;londiste3 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  slave.ini &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  create-leaf slave &lt;span class=&quot;s1&quot;&gt;&apos;user=postgres host=127.0.0.1 dbname=myapp&apos;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user=postgres host=IPofOldServer dbname=myapp&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Check the slave.log to see if you have the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INFO Node &quot;slave&quot; initialized for queue &quot;myappq&quot; with type &quot;branch&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spin up the slave’s replication worker process by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 -d slave.ini worker&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tell the master node that we want to replicate all the tables in the db (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 master.ini add-table --all&lt;/code&gt;) as well as all the sequences (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 master.ini add-seq --all&lt;/code&gt;). Note that this only adds the tables that currently exist. If you add new tables to the master db, you need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 master.ini add-table tablename&lt;/code&gt; to add them to replication. Ditto for new sequences.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the slave node, also replicate all the tables (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 slave.ini add-table --all&lt;/code&gt;) and all the sequences (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 slave.ini add-seq --all&lt;/code&gt;). Note that this only adds the tables that currently exist. If you add new tables to the master db, you need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 slave.ini add-table tablename&lt;/code&gt; to add them to replication. Ditto for new sequences.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, replication is actually up and running. Any changes occurring on the master node are being replicated to the slave node. That’s all you need to do.&lt;/p&gt;

&lt;p&gt;But what about the data that was already in the master db? You don’t need to do anything. It’s already replicating. You can forcibly tell Londiste to ‘catch things up’ by doing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 slave.ini resync --all&lt;/code&gt; if you like though.&lt;/p&gt;

&lt;p&gt;If you want to check on the replication at any point, simply issue &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 slave.ini status&lt;/code&gt; or to be more pedantic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;londiste3 slave.ini compare&lt;/code&gt; which will examine row counts and md5sums between master and slave.&lt;/p&gt;

&lt;p&gt;Enjoy your new cross-version logical replication!&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="postgresql" /><category term="replication" /><category term="howto" /><summary type="html">UPDATE: My coworker Richard liked this write up, and Skytools, so much he threw together a demo script. You can get it here.</summary></entry><entry><title type="html">PostgreSQL Streaming Replication in 10 Minutes</title><link href="/2016/04/18/PostgreSQL-Streaming-Replication-In-10-Minutes/" rel="alternate" type="text/html" title="PostgreSQL Streaming Replication in 10 Minutes" /><published>2016-04-18T10:47:10-04:00</published><updated>2016-04-18T10:47:10-04:00</updated><id>/2016/04/18/PostgreSQL-Streaming-Replication-In-10-Minutes</id><content type="html" xml:base="/2016/04/18/PostgreSQL-Streaming-Replication-In-10-Minutes/">&lt;p&gt;&lt;img src=&quot;/images/posts/database-replication.png&quot; class=&quot;rleader&quot; /&gt;While there’s absolutely nothing new in this blog post that isn’t covered by the wonderful &lt;a href=&quot;http://www.postgresql.org/docs/current/static/index.html&quot;&gt;docs&lt;/a&gt; I’ve been asked multiple times now by customers if we had some kind of ‘crib notes’ format for how to get replication up and running. And since I just had to set this up and document it for a customer, I figured I might as well post it so that I can simply point people to it in the future. So here we are.&lt;/p&gt;

&lt;p&gt;Now, let’s get started. I assume you already have two PostgreSQL servers up with the binaries installed. For simplicity’s sake, we will call these machines ‘master’ and ‘standby’. Note too that I’m using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replication slots&lt;/code&gt; which needs PostgreSQL 9.4.0 or later; if you’re using something earlier, simply ignore the slot stuff.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;On the master, do the following:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; postgresql.conf
    wal_level = hot_standby
    full_page_writes = on
    wal_log_hints = on
    max_wal_senders = 6
    max_replication_slots = 6
    hot_standby = on
    hot_standby_feedback = on
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the master, add the external IP addresses of the servers to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_hba.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; pg_hba.conf
    host replication repl_user IP_of_master/32 md5
    host replication repl_user IP_of_standby/32 md5
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart PostgreSQL on the master for the changes to take affect&lt;/p&gt;

&lt;p&gt;On the master, create the replication user:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;psql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CREATE ROLE repl_user LOGIN REPLICATION ENCRYPTED PASSWORD &apos;secretpasswordhere&apos;;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the master, create the replication slot for the standby:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;psql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT * FROM pg_create_physical_replication_slot(&apos;standby1&apos;, true);&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the standby, wipe the existing cluster:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/lib/pgsql/9.4/data
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pg_ctl &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-mf&lt;/span&gt; stop
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rfv&lt;/span&gt; data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the standby, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_basebackup&lt;/code&gt; command to clone the master (enter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repl_user&lt;/code&gt;’s password from above when prompted):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pg_basebackup &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-Fp&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-Xs&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; fast &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;initial clone&apos;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; IP_of_master &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; repl_user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the standby, tweak the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recovery.conf&lt;/code&gt; that was created for you and add the replication slot name:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;data
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; recovery.conf
primary_slot_name = &apos;standby1&apos;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start the standby up&lt;/p&gt;

&lt;p&gt;And that’s it. You should be all done. Easy, right?&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="postgresql" /><category term="replication" /><category term="howto" /><summary type="html">While there’s absolutely nothing new in this blog post that isn’t covered by the wonderful docs I’ve been asked multiple times now by customers if we had some kind of ‘crib notes’ format for how to get replication up and running. And since I just had to set this up and document it for a customer, I figured I might as well post it so that I can simply point people to it in the future. So here we are.</summary></entry></feed>