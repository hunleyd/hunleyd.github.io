<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed/by_tag/computers.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-08-25T16:27:39-04:00</updated><id>/feed/by_tag/computers.xml</id><title type="html">Doug’s Dabblings</title><subtitle>A collection of thoughts on things in my life that I&apos;m experiencing, playing with, or suffering through. Mostly tech related, but sometimes not.</subtitle><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><entry><title type="html">I said brr it’s cold in here</title><link href="/2021/08/25/I-said-brr-it-s-cold-in-here/" rel="alternate" type="text/html" title="I said brr it’s cold in here" /><published>2021-08-25T11:33:18-04:00</published><updated>2021-08-25T11:33:18-04:00</updated><id>/2021/08/25/I-said-brr-it-s-cold-in-here</id><content type="html" xml:base="/2021/08/25/I-said-brr-it-s-cold-in-here/">&lt;p&gt;I don’t like the heat. I hate being hot. Always have. I’m the guy who will
leave the windows open when others have already turned on the furnace. And
I used to be guy who ran the AC all the time and ran it at a very low temp.
Recently though, I’ve come to realize that as long as it’s colder in here than
it is out there, it’s all good. However, the delta has be more than just a few
degrees. And I need the fan on.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://c.tenor.com/_WTiGlJeiUQAAAAC/brrr-cold.gif&quot; /&gt;&lt;/center&gt;

&lt;p&gt;So, with this realization, I set about configuring my Home Assistant to
constantly tweak the AC so that it’s 10 degrees cooler inside than outside (if
I’m home). To accomplish this, I use the temperature as reported by
&lt;a href=&quot;https://www.weatherbit.io/&quot;&gt;Weatherbit.io&lt;/a&gt; which I integrated via
&lt;a href=&quot;https://hacs.xyz/&quot;&gt;HACS&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/briis/weatherbit&quot;&gt;integration&lt;/a&gt;. I already had my
&lt;a href=&quot;https://www.home-assistant.io/integrations/nest/&quot;&gt;Nest&lt;/a&gt; integrated, and could
have used its outdoor temperature sensor, but I found it slower to update than
Weatherbit.&lt;/p&gt;

&lt;p&gt;The automation is actually really simple. In fact, it’s a little too simple in
that I completely forgot to account for when I’m sleeping. You see, as much as
I don’t like the heat, I literally cannot sleep if I’m hot. And for whatever
reason, I put off heat while I sleep, so the room has to be straight up &lt;em&gt;cold&lt;/em&gt;
for me to even have a chance of resting well. So I &lt;em&gt;quickly&lt;/em&gt; realized that
I need to check what time it is and if its late set the temp low and stop
adjusting it until I get up in the morning. Which brings me to my binary
sensor:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tod&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Daytime&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;08:00&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;23:00&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I’ve defined ‘daytime’ as between 0800 and 2300.&lt;/p&gt;

&lt;p&gt;So my automation looks like:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Adjust the AC&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1625265017&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Keep&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;degrees&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cooler&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(but&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;least&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;72);&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;keep&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;night&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;state&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.weatherbit_temperature&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;state&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;climate.living_room&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cool&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;climate.set_temperature&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;climate.living_room&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;data_template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;-&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{%- if states(&apos;binary_sensor.daytime&apos;) == &apos;on&apos; -%}&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;{%- if states(&apos;sensor.weatherbit_temperature&apos;)|int - 10 &amp;gt; 71 -%}&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;{{ states(&apos;sensor.weatherbit_temperature&apos;)|int - 10 }}&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;{%- else -%}&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;72&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;{%- endif -%}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{%- else -%}&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;68&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{%- endif -%}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;single&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Essentially, every time the temperature (as reported by Weatherbit) changes,
this automation kicks off. It checks if the Nest is set to ‘cool’ mode
(which means the AC is on and also means I’m home as another automation sets
the Nest to ‘off’ when I leave) and then it checks if its ‘daytime’ or not. If
it is, it subtracts 10 from the reported outside temp, checks if that value is
greater than 71 degrees and if so, sets the AC to that target temp. If the
result is less than or equal to 72, it sets the target temp to 72. Unless it’s
not ‘daytime’ in which case it sets it to 68 (my preferred sleeping temp).&lt;/p&gt;

&lt;p&gt;It’s trivial, but it’s very powerful. And its saved me some money already,
which is always nice.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="smarthome" /><category term="computers" /><category term="howto" /><summary type="html">I don’t like the heat. I hate being hot. Always have. I’m the guy who will leave the windows open when others have already turned on the furnace. And I used to be guy who ran the AC all the time and ran it at a very low temp. Recently though, I’ve come to realize that as long as it’s colder in here than it is out there, it’s all good. However, the delta has be more than just a few degrees. And I need the fan on.</summary></entry><entry><title type="html">Automations, timers, and you</title><link href="/2021/08/16/Automations-timers-and-you/" rel="alternate" type="text/html" title="Automations, timers, and you" /><published>2021-08-16T09:48:35-04:00</published><updated>2021-08-16T09:48:35-04:00</updated><id>/2021/08/16/Automations--timers--and-you</id><content type="html" xml:base="/2021/08/16/Automations-timers-and-you/">&lt;p&gt;For a while now, I’ve been automating my apartment using the
&lt;a href=&quot;https://www.home-assistant.io/docs/automation/basics/&quot;&gt;automations&lt;/a&gt; component
of &lt;a href=&quot;https://www.home-assistant.io&quot;&gt;Home Assistant&lt;/a&gt;. In fact, I had amassed
quite the collection of automations and was starting to have a problem keeping
track of them all and their various interactions (intentional or otherwise).
So earlier this year when Home Assistant introduced &lt;a href=&quot;https://www.home-assistant.io/blog/2021/04/07/release-20214/#automation-debugging&quot;&gt;automation
debugging&lt;/a&gt;
I decided to sit down and refactor the whole thing.&lt;/p&gt;

&lt;p&gt;At first, I considered deploying and using
&lt;a href=&quot;https://en.wikipedia.org/wiki/MQTT&quot;&gt;MQTT&lt;/a&gt; which, it seems, a lot of Home
Assistant users do. However, I wasn’t overly excited at running another
container or at learning Yet Another Thing. Likewise, I considered
&lt;a href=&quot;https://community.home-assistant.io/t/home-assistant-community-add-on-node-red/55023&quot;&gt;Node-RED&lt;/a&gt;
and discarded it too. I’m probably making things harder for myself by sticking
to editing YAML in Vim but I knew my needs weren’t overly complicated and by
sticking to ‘the basics’ I knew it would force me to stop being overly-clever
and make something that Just Works™. So I sat down with the new
debugging tool, wrote out all of my ‘what do i want automated’ needs, and
pored back over the automation documentation.&lt;/p&gt;

&lt;p&gt;And that’s when I realized that
a &lt;a href=&quot;https://www.home-assistant.io/integrations/timer/&quot;&gt;timer&lt;/a&gt; was the component
I’d been overlooking all this time. Timers, it turns out, can be used very
much in an MQTT-lite fashion. You see, you can have one or more routines
triggered by the same timer; in fact, some set of routines can listen for
timer (re)start and another set can listen for timer finish/idle. Mix-n-match
these up and you can make some very interesting actions happen. And it means
my automations each generally do one thing and only one thing (KISS) which, in
turn, means they are less likely to fail and easier to debug when they do.
I was stoked! I was also annoyed at not having paid any attention to timers
from the get-go, but what are you gonna do?&lt;/p&gt;

&lt;p&gt;My first task was thinking about what timers I’d need. I knew right away I’d want
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer.away&lt;/code&gt; for when I leave home:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;away&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;00:05:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But what other timers do I need? I quickly realized that I need a timer for
almost every switch I have defined in Home Assistant. I could get away with
fewer, but I allowed myself a little bit of cleverness and created one for
each switch &lt;em&gt;with the name of the timer being the name of the switch it
controls&lt;/em&gt;. So, for example, I have a TP Link Kasa smart switch controlling my
hallway light called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch.hallway_light&lt;/code&gt;. So I created a matching timer
called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer.switch_hallway_light&lt;/code&gt;. This allows me to to write a simple
automation like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Trigger - Start light switch trigger&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1625266493&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;corresponding&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;trigger&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;state&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;switch.bar_light&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&apos;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;state&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;switch.closet_light&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&apos;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;state&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;switch.dining_room_light&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&apos;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;state&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;switch.entryway_light&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&apos;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;state&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;switch.hallway_light&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.start&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0:10:00&apos;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;timer.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;trigger.entity_id.split(&apos;.&apos;)|join(&apos;_&apos;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(note that the { are only escaped here because Jekyll is stupid; they are
&lt;strong&gt;not&lt;/strong&gt; escaped in the actual code)&lt;/p&gt;

&lt;p&gt;What this does is exactly what it says in the description. Whenever one of the
lights in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger&lt;/code&gt; section turns on, it starts the corresponding timer.
The magic is in the very last line of the automation:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;timer.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;trigger.entity_id.split(&apos;.&apos;)|join(&apos;_&apos;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we’re doing here it taking the entity id that fired the automation (e.g.
what switch did we turn on) from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger.entity_id&lt;/code&gt; value then we
swap out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; which gives us the name of our timer. So here we
have one automation, that does one very simple thing which makes it kinda hard
to break this automation.&lt;/p&gt;

&lt;p&gt;So we’ve turned on the hallway light, and started our timer. What happens when
the timer runs out? Well, we have an automation that is triggered by that:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Trigger - Kill the lights&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1625267293&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;out,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;corresponding&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;light&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;event&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.finished&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.switch_bar_light&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;event&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.finished&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.switch_closet_light&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;event&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.finished&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.switch_dining_room_light&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;event&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.finished&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.switch_entryway_light&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;event&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.finished&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;event_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timer.switch_hallway_light&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;homeassistant.turn_off&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;switch.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;trigger.event.data.entity_id.split(&apos;_&apos;)[1:4]|join(&apos;_&apos;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it’s basically the opposite of the previous automation. We
list which timers we care about, and when they finish, we munge the timer name
a bit to get the switch’s name and then we turn that switch off. Simplicity.&lt;/p&gt;

&lt;p&gt;Hopefully, you can see the utility of timers in Home Assistant. This is just
a very basic example of how I use them, but I think it illustrates their user
pretty well. I still have just over 50 automations, but that’s way down from
what I had, and the automations themselves are now way simpler. Overall,
I consider this a win.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="smarthome" /><category term="computers" /><category term="howto" /><summary type="html">For a while now, I’ve been automating my apartment using the automations component of Home Assistant. In fact, I had amassed quite the collection of automations and was starting to have a problem keeping track of them all and their various interactions (intentional or otherwise). So earlier this year when Home Assistant introduced automation debugging I decided to sit down and refactor the whole thing.</summary></entry><entry><title type="html">Generating DNS noise</title><link href="/2021/08/14/Generating-DNS-noise/" rel="alternate" type="text/html" title="Generating DNS noise" /><published>2021-08-14T12:27:09-04:00</published><updated>2021-08-14T12:27:09-04:00</updated><id>/2021/08/14/Generating-DNS-noise</id><content type="html" xml:base="/2021/08/14/Generating-DNS-noise/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt; is one of those thing
most people never think about. It’s one of those things in the background that
quietly does its job and no one pays it no mind. Which is why it’s surprising
to people when they discover that if their DNS traffic can be logged, a very
informative picture of them can be created.&lt;/p&gt;

&lt;p&gt;To combat this user fingerprinting/tracking, enhancements to DNS like &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_over_HTTPS&quot;&gt;DNS over
HTTPS&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_over_TLS&quot;&gt;DNS over
TLS&lt;/a&gt; come into existence. And
while I’m not knocking those solutions, I would like to point out that the
endpoint &lt;em&gt;still knows what lookups you performed&lt;/em&gt;. Unfortunately, there isn’t
really any way currently to ask a server ‘hey, whats the IP address for
google.com’’ and not have the other end know that you asked for Google’s
website. It’s literally the nature of the task for the other end to know all
the websites you asked for name resolution of.&lt;/p&gt;

&lt;p&gt;So what can a person do to make it harder for the other end to create a useful
picture of your surfing habits? Well, data is only as useful as it is clean.
If you have a list of 1000 DNS requests from the user, then you can be fairly
certain where that user was surfing (more technically, where the source IP was
surfing, but let’s not get pedantic). However, if you had a list of 1000000 DNS
requests, of which 1000 were the original legitimate DNS requests, and the
remaining 999000 were randomly generated by a process, then how easily could
you determine where the user was actually surfing? Essentially, you’ve reduced
the Signal-to-Noise so low that the signal is ‘lost’.&lt;/p&gt;

&lt;p&gt;With this goal in mind, I set out to introduce some noise into my DNS requests
as my weekend project this weekend. It turned out to be easier than I expected
thanks to some existing work by others (always stand on other’s shoulders when
you can). The first thing I did was clone down a copy of
&lt;a href=&quot;https://github.com/1tayH/noisy&quot;&gt;noisy&lt;/a&gt;. After playing with it a bit, I felt
like it was a decent base, but I didn’t care for the default “root_urls” (The
Pirate Bay? Really? I don’t need my ISP sending me cease-and-desist letters,
thank you), I didn’t think there were enough “root_urls”, and I didn’t like
that the “root_urls” were never updated. Thankfully, Cisco has a project
called &lt;a href=&quot;https://umbrella.cisco.com/blog/cisco-umbrella-1-million&quot;&gt;Umbrella&lt;/a&gt;
that seems like a good fit for all three concerns.&lt;/p&gt;

&lt;p&gt;At this point, it was just a matter of gluing all these pieces together.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; later, and it was time to start working. The first thing I did was
create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/noisy&lt;/code&gt; to hold my modified config and to provide a working
directory for the daemon. Daemon, you say? Yup, for the second step, we create
a systemd service file to run our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noise&lt;/code&gt; process. The
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/system/noisy.service&lt;/code&gt; file ends up looking like:&lt;/p&gt;

&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Simple random DNS, HTTP/S internet traffic noise generator

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/etc/noisy
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/python /srv/repos/noisy/noisy.py --config /etc/noisy/config.json
&lt;span class=&quot;nt&quot;&gt;SyslogIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;noisy

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this incredibly simple setup in place, systemd will launch the Python
script in our copy of the repo (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/srv/repos/noisy&lt;/code&gt; on my system), use the
config file I write in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/noisy&lt;/code&gt;, and will log to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journald&lt;/code&gt; while
identifying itself as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noisy&lt;/code&gt; in the journal.&lt;/p&gt;

&lt;p&gt;Now we just need to write our config file to use the hosts from Umbrella.
Thankfully, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noisy&lt;/code&gt; uses JSON for its config file, so rewriting it is trivial.
I created a Bash script to handle this for me:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /etc/noisy/top-1m.csv.zip /etc/noisy/top-1m.csv.zip.old

wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /etc/noisy/top-1m.csv.zip http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip

unzip &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /etc/noisy &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /etc/noisy/top-1m.csv.zip

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/noisy/config.json
{
        &quot;max_depth&quot;: 25,
        &quot;min_sleep&quot;: 3,
        &quot;max_sleep&quot;: 6,
        &quot;timeout&quot;: false,
        &quot;root_urls&quot;: [
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/noisy/top-1m.csv | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;url&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://medium.com&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/noisy/config.json
        ],
        &quot;blacklisted_urls&quot;: [
                &quot;https://t.co&quot;,
                &quot;t.umblr.com&quot;,
                &quot;messenger.com&quot;,
                &quot;itunes.apple.com&quot;,
                &quot;l.facebook.com&quot;,
                &quot;bit.ly&quot;,
                &quot;mediawiki&quot;,
                &quot;.css&quot;,
                &quot;.ico&quot;,
                &quot;.xml&quot;,
                &quot;intent/tweet&quot;,
                &quot;twitter.com/share&quot;,
                &quot;dialog/feed?&quot;,
                &quot;.json&quot;,
                &quot;zendesk&quot;,
                &quot;clickserve&quot;,
                &quot;.png&quot;,
                &quot;.iso&quot;
        ],
        &quot;user_agents&quot;: [
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /srv/repos/noisy/config.json|jq .user_agents | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; +2 &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;}&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/noisy/config.json

&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/^M//&apos;&lt;/span&gt; /etc/noisy/config.json

systemctl restart noisy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script moves the previously downloaded Umbrella file out of the way,
downloads the latest version from S3, and unzips it. This gives us a CSV file
that we’ll use in a moment. The script then starts writing the config file by
setting some defaults and starting the ‘root_urls’ key. We then look over
every line in the CSV file, and pull the URL from the 2&lt;sup&gt;nd&lt;/sup&gt; field. We
prepend ‘http://’ to the URL and write the result out to our config file. To
close out the ‘root_urls’ section, we write &lt;a href=&quot;https://medium.com&quot;&gt;medium.com&lt;/a&gt;
to it (just to always have a known quantity as the ‘end marker’ if I need to
debug anything). Up next, we copy over the ‘blacklisted_urls’ keys from the
default config, and finally we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; to pull all the ‘user_agents’ into our
config. Because Cisco uses DOS line-endings, we run a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; on the resulting
file to remove these and we’re good to go. I’m sure there’s a “better” way to do
all this, but it wasn’t worth optimizing for now, imho.&lt;/p&gt;

&lt;p&gt;Now that we’ve got our file in shape, we tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; to restart the daemon
and we’re off to the races, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journalctl&lt;/code&gt; shows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Aug 14 17:09:02 nuc noisy[240416]: INFO:root:Visiting https://www.potpourrigift.com
Aug 14 17:09:07 nuc noisy[240416]: INFO:root:Visiting https://www.potpourrigift.com/ShopCategory.aspx?ID=320,362&amp;amp;ITEMS=RE9032%7CR0D067%7CR82102%7CRD9008&amp;amp;HPLoc=MB18
Aug 14 17:09:13 nuc noisy[240416]: INFO:root:Visiting
https://www.potpourrigift.com/CustomerService.aspx?page=Free+Catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now I’m sure my ISP hates me ;)&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="geek" /><category term="linux" /><category term="howto" /><category term="networking" /><category term="technology" /><summary type="html">DNS is one of those thing most people never think about. It’s one of those things in the background that quietly does its job and no one pays it no mind. Which is why it’s surprising to people when they discover that if their DNS traffic can be logged, a very informative picture of them can be created.</summary></entry><entry><title type="html">Ricing it up</title><link href="/2021/07/31/Ricing-it-up/" rel="alternate" type="text/html" title="Ricing it up" /><published>2021-07-31T05:12:54-04:00</published><updated>2021-07-31T05:12:54-04:00</updated><id>/2021/07/31/Ricing-it-up</id><content type="html" xml:base="/2021/07/31/Ricing-it-up/">&lt;p&gt;One of the reasons that I find myself going back to Gentoo is that you compile the entire system &lt;em&gt;for your hardware&lt;/em&gt; which, in theory, leads to the best performance possible. So the first task that I undertook when switching the NUC over to it was to figure out what compile options ClearLinux uses. Once I had figured those settings out, I then decided to use LTO optimization for all packages that support it. However, I didn’t want to use the &lt;a href=&quot;https://github.com/gentoo-mirror/lto-overlay&quot;&gt;LTO overlay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After doing a lot of digging around and some experimentation, I finally
settled on the following configuration:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/make.conf
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-march=skylake -mtune=skylake -O3 -pipe -w -falign-functions=32&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -fgraphite-identity -floop-nest-optimize -floop-parallelize-all&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -flto=auto -flto-partition=one -fuse-linker-plugin&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHOST&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;x86_64-pc-linux-gnu&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CPU_FLAGS_X86&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt rdrand sse sse2 sse3 sse4_1 sse4_2 ssse3&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CXXFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS}&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LDFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-Wl,-O3 -Wl,--sort-common -Wl,--as-needed&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I start with a base CFLAGS, then I add Graphite optimizations,
and finally the LTO optimizations are added. Occasionally, LTO will cause
undefined symbols and the build will fails, so for that I have:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/env/cflags-ffat-lto-objects
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -ffat-lto-objects&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And occasionally a package just won’t compile with LTO, so that I use:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/env/cflags-fno-lto
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-march=skylake -mtune=skylake -O3 -pipe -w -falign-functions=32&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -fgraphite-identity -floop-nest-optimize -floop-parallelize-all&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CXXFLAGS&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever I run into a package that has compile issues, I simply create a file
for it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/portage/package.env&lt;/code&gt; that looks like:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package_atom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cflags&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;ffat&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;lto&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package_atom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cflags&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;fno&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;lto&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This little setup has, so far, worked like a charm for me. Out of the 63
packages in my world file, only 12 need an env file to compile properly on my
~amd64 install. And everything feels snappy during my day to day. I’m quite
pleased.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="linux" /><category term="gentoo" /><category term="technology" /><summary type="html">One of the reasons that I find myself going back to Gentoo is that you compile the entire system for your hardware which, in theory, leads to the best performance possible. So the first task that I undertook when switching the NUC over to it was to figure out what compile options ClearLinux uses. Once I had figured those settings out, I then decided to use LTO optimization for all packages that support it. However, I didn’t want to use the LTO overlay.</summary></entry><entry><title type="html">Hello again old friend</title><link href="/2021/07/24/Hello-again-old-friend/" rel="alternate" type="text/html" title="Hello again old friend" /><published>2021-07-24T06:04:49-04:00</published><updated>2021-07-24T06:04:49-04:00</updated><id>/2021/07/24/Hello-again-old-friend</id><content type="html" xml:base="/2021/07/24/Hello-again-old-friend/">&lt;p&gt;I &lt;a href=&quot;/posts/Bye-Pi-Hello-NUC&quot;&gt;posted&lt;/a&gt; a year ago about dropping ClearLinux and
switching to Ubuntu Server on my NUC. While that little experiment was fun, it
didn’t last long. I’m not entirely sure what it is about my brain/personality, but
I just do not like any of the binary Linux distros out there for my own long-term use so I went back to my old friend, Gentoo.&lt;/p&gt;

&lt;p&gt;It’s been a few months now, and I must say that running Gentoo on the NUC has
been a pleasant experience. It took a little work to get up to speed on recent
changes in Gentoo, and I had to dig into things to get an optimized install
going on the NUC, but I’m pretty happy with the results.&lt;/p&gt;

&lt;p&gt;Maybe I’ll actually blog more this time about what I’m doing with this
install. Or maybe I’ll lapse back into old habits and forget to. Only time
will tell.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="linux" /><category term="gentoo" /><summary type="html">I posted a year ago about dropping ClearLinux and switching to Ubuntu Server on my NUC. While that little experiment was fun, it didn’t last long. I’m not entirely sure what it is about my brain/personality, but I just do not like any of the binary Linux distros out there for my own long-term use so I went back to my old friend, Gentoo.</summary></entry><entry><title type="html">It’s Podman, man</title><link href="/2020/07/30/It-s-Podman-man/" rel="alternate" type="text/html" title="It’s Podman, man" /><published>2020-07-30T08:44:51-04:00</published><updated>2020-07-30T08:44:51-04:00</updated><id>/2020/07/30/It-s-Podman-man</id><content type="html" xml:base="/2020/07/30/It-s-Podman-man/">&lt;p&gt;As mentioned (very) briefly in other posts, I run &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt; as the ‘control hub’ for all my “smart” devices in my home. I originally ran it via their ‘HASSOS’ Docker image but was never really happy with it. So when I most recently rebuilt my NUC, I decided to give this Podman thing a look. And so far, I seem to like it better. I’m still not entirely sold on this whole container bullshit, but whatever ;)&lt;/p&gt;

&lt;p&gt;When I first decided to use Podman, the install directions for Ubuntu on the Podman &lt;a href=&quot;https://podman.io/getting-started/installation.html&quot;&gt;site&lt;/a&gt; were not updated to point to the proper Apt source, and I had to dig around on various GitHub issues for the project before finding the correct info:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /etc/os-release
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/ /&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/Release.key | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;podman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are now on the site and they work for today but if you’re visiting this post in the future it might have changed.&lt;/p&gt;

&lt;p&gt;So anyway, after installing and playing with Podman for a while, I ended up deciding to run three containers (pods?) under rootfull Podman (technically, two of them could run rootless, but I’d rather be consistent). My next step was to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podman-generate-systemd&lt;/code&gt; to write some systemd service scripts for me. I can’t recall exactly why now, but I ended up tweaking the service files by hand and they now look like this:&lt;/p&gt;

&lt;p&gt;Home Assistant:&lt;/p&gt;
&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;homeassistant system monitor Podman container

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nt&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30s
&lt;span class=&quot;nt&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm homeassistant
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/podman run --name=homeassistant -v /root/podman/hassio:/config --net=host -v /proc
&lt;span class=&quot;nt&quot;&gt;:/host/proc:ro -v /sys:/host/sys:ro --cap-add SYS_PTRACE --security-opt apparmor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;unconfined -v /:/mnt
 &lt;span class=&quot;err&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/home:/srv&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;homeassistant/home-assistant&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop homeassistant
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm homeassistant
&lt;span class=&quot;nt&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop homeassistant
&lt;span class=&quot;nt&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;never
&lt;span class=&quot;nt&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Netdata:&lt;/p&gt;
&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;netdata system monitor Podman container

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nt&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30s
&lt;span class=&quot;nt&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm netdata
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/podman run --name netdata -p 19999:19999 -v /proc:/host/proc:ro -v /sys:/host/sys:ro -v /root/podman/netdata:/etc/netdata --cap-add SYS_PTRACE --security-opt apparmor=unconfined netdata/netdata
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop netdata
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm netdata
&lt;span class=&quot;nt&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop netdata
&lt;span class=&quot;nt&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;never
&lt;span class=&quot;nt&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BOINC:&lt;/p&gt;
&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;boinc system monitor Podman container

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nt&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30s
&lt;span class=&quot;nt&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm boinc
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/podman run --name boinc --net=host -v /root/podman/boinc:/var/lib/boinc --security-opt apparmor=unconfined -e BOINC_GUI_RPC_PASSWORD=&quot;123&quot; -e BOINC_CMD_LINE_OPTIONS=&quot;--allow_remote_gui_rpc&quot; boinc/client
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop boinc
&lt;span class=&quot;nt&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman rm boinc
&lt;span class=&quot;nt&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;-/usr/bin/podman stop boinc
&lt;span class=&quot;nt&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;never
&lt;span class=&quot;nt&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;30

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s been running like this now for a while and I’m pretty happy with things. I was eagerly watching the planned Podman feature that would self-update the pods, but I think I’m gonna leave that process manual for now since Home Assistant has been pushing a lot of ‘breaking changes’ lately and I need to review my configs before updating anyway.&lt;/p&gt;

&lt;p&gt;In any case, I kinda like Podman for when I need to use a container. So if you’re running Docker at home and don’t have a specific need for Docker itself, see if Podman will meet your needs.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="geek" /><category term="linux" /><summary type="html">As mentioned (very) briefly in other posts, I run Home Assistant as the ‘control hub’ for all my “smart” devices in my home. I originally ran it via their ‘HASSOS’ Docker image but was never really happy with it. So when I most recently rebuilt my NUC, I decided to give this Podman thing a look. And so far, I seem to like it better. I’m still not entirely sold on this whole container bullshit, but whatever ;)</summary></entry><entry><title type="html">Bye Pi, Hello NUC</title><link href="/2020/07/19/Bye-Pi-Hello-NUC/" rel="alternate" type="text/html" title="Bye Pi, Hello NUC" /><published>2020-07-19T08:14:03-04:00</published><updated>2020-07-19T08:14:03-04:00</updated><id>/2020/07/19/Bye-Pi-Hello-NUC</id><content type="html" xml:base="/2020/07/19/Bye-Pi-Hello-NUC/">&lt;p&gt;About a year ago (Sep 2019 to be precise) I decided to end my Raspberry Pi experiment and begin  a new experiment with an Intel NUC. It’s not that the Pi is incapable or anything. I really like the platform and will probably find something else to use it for. But my computing needs/desires had changed and I was looking at having a small fleet of them (I already had 2 and was contemplating more) and I really didn’t want to go that route. So I looked around, did some research, saved up some money and ended up with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/intel_nuc_8.jpg&quot; class=&quot;lleader&quot; /&gt;An Intel NUC 8 Performance-G Kit. \  This is a Core i7-based kit (NUC8i7HVK) that just needs RAM and storage added. It’s a Radeon RX Vega M GH 32GB video card, an 802.11{a,b,g,n} device, 2x Gb Ethernet, 2x USB 2.0 ports, 5x USB 3.0 ports. 2x HDMI ports, 2x mini-Display ports, 2x Thunderbolt 3 ports, and a Bluetooth 4.2 radio. All inside a 6.4 lb 10.8”x7.8”x4.8” case. I fricking love it.&lt;/p&gt;

&lt;p&gt;I put a pair of HyperX Kingston Technology Impact 16GB 2400MHz DDR4 sticks in it after talking myself down from a pair of 32GB sticks.&lt;/p&gt;

&lt;p&gt;And finally, I put in a pair of Samsung 970 PRO SSD 1TB M.2 NVMe SSDs (OK, that’s a lie. I went with just one initially, but bought a second one like a month later).&lt;/p&gt;

&lt;p&gt;Given the nature of the beast I’d assembled, I started with &lt;a href=&quot;https://clearlinux.org/&quot;&gt;ClearLinux&lt;/a&gt; as my OS. It’s &lt;strong&gt;stupid fast&lt;/strong&gt;. And it’s neat and interesting in that ‘not like other girls’ kinda way. Ultimately though, I ended up ditching it due to the state of packaging. I’ve read that they have some new packaging initiatives though so you shouldn’t rule it out based on my experience last year. I then move to Ubuntu LTS for a short while, realized my mistake, and am currently on Ubuntu Server. So far, it’s doing what I need it to do but, protip:&lt;/p&gt;

&lt;p&gt;Make sure you google ‘how to X on ubuntu server’&lt;/p&gt;

&lt;p&gt;If you just Google ‘how to X ubuntu’ then a lot of the time what you find won’t apply. Networking, for example, using something called &lt;a href=&quot;https://netplan.io/&quot;&gt;netplan&lt;/a&gt; which is nothing like regular Ubuntu desktop networking.&lt;/p&gt;

&lt;p&gt;Anyway, that’s all for now. I just wanted to post this as background info cause I plan on posting about my travails w/ the Ubuntu Server as I go forward.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="linux" /><summary type="html">About a year ago (Sep 2019 to be precise) I decided to end my Raspberry Pi experiment and begin a new experiment with an Intel NUC. It’s not that the Pi is incapable or anything. I really like the platform and will probably find something else to use it for. But my computing needs/desires had changed and I was looking at having a small fleet of them (I already had 2 and was contemplating more) and I really didn’t want to go that route. So I looked around, did some research, saved up some money and ended up with:</summary></entry><entry><title type="html">Routing email through GMail on OSX</title><link href="/2016/11/15/Routing-email-through-GMail-on-OSX/" rel="alternate" type="text/html" title="Routing email through GMail on OSX" /><published>2016-11-15T05:51:00-05:00</published><updated>2016-11-15T05:51:00-05:00</updated><id>/2016/11/15/Routing-email-through-GMail-on-OSX</id><content type="html" xml:base="/2016/11/15/Routing-email-through-GMail-on-OSX/">&lt;p&gt;&lt;img src=&quot;http://www.postfix.org/mysza.gif&quot; class=&quot;lleader&quot; /&gt;Like most geeks, I have scripts that I’ve written that I like to have run from cron on a regular basis. And since the running of these scripts might be in the middle of the night, I like for them to email their output to me so I know if they succeeded or failed. As such, I need an MTA on my computer that can actually deliver these emails to GMail. For me, this is trivial using Sendmail or SSMTP on a Linux box, but I can never remember how to do this using Postfix on OSX. So after having to Google everything to get this running once more, I’m going to commit the steps here for my future self to reference :)&lt;/p&gt;

&lt;p&gt;The first thing we’re going to do is open an iTerm and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -i&lt;/code&gt; to become root. Then we’re going to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi /etc/postfix/main.cf&lt;/code&gt; and we’re going to add/set the following:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myhostname&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;relayhost&lt;/span&gt; = [&lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;]:&lt;span class=&quot;m&quot;&gt;587&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_auth_enable&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_password_maps&lt;/span&gt;= &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;sasl_passwd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_security_options&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;noanonymous&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_sasl_mechanism_filter&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smtp_use_tls&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have Two-Factor Auth (2FA) enabled on my Google account (you should too!), so for me, the next step is to log into Google and create an ‘app password’. Once I have that password in hand, we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi /etc/postfix/sasl_passwd&lt;/code&gt; and add:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;smtp&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;]:&lt;span class=&quot;m&quot;&gt;587&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;@&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;:&lt;span class=&quot;n&quot;&gt;app_passwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Secure that file by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 0600 /etc/postfix/sasl_passwd&lt;/code&gt; and then have Postfix hash it by doing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postmap /etc/postfix/sasl_passwd&lt;/code&gt;. Finally, restart Postfix:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;launchctl stop org.postfix.master
launchctl start org.postfix.master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And everything should work.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="osx" /><category term="geek" /><category term="computers" /><summary type="html">Like most geeks, I have scripts that I’ve written that I like to have run from cron on a regular basis. And since the running of these scripts might be in the middle of the night, I like for them to email their output to me so I know if they succeeded or failed. As such, I need an MTA on my computer that can actually deliver these emails to GMail. For me, this is trivial using Sendmail or SSMTP on a Linux box, but I can never remember how to do this using Postfix on OSX. So after having to Google everything to get this running once more, I’m going to commit the steps here for my future self to reference :)</summary></entry><entry><title type="html">Glutton for Punishment</title><link href="/2016/02/29/Glutton-for-punishment/" rel="alternate" type="text/html" title="Glutton for Punishment" /><published>2016-02-29T05:14:50-05:00</published><updated>2016-02-29T05:14:50-05:00</updated><id>/2016/02/29/Glutton-for-punishment</id><content type="html" xml:base="/2016/02/29/Glutton-for-punishment/">&lt;p&gt;&lt;img src=&quot;http://www.theshell.guru/wp-content/uploads/2015/12/osx-logo3.png&quot; class=&quot;rleader&quot; /&gt;I recently got a new Macbook Pro from work as my old one was having keyboard issues and since it was 3+ yrs old they deemed it not worth fixing. As you probably know, I spent a lot of time and effort on the previous mbp to get &lt;a href=&quot;http://www.gentoo.org&quot;&gt;Gentoo&lt;/a&gt; up and running on it. I chose &lt;em&gt;not&lt;/em&gt; to do so with this one.&lt;/p&gt;

&lt;p&gt;While I have looked into it and believe that I could get Gentoo up and running fairly easily, I’ve decided to skip it for now and try to live with OSX. I travel for work and never know what I’m going to be asked to do when onsite. Sometimes I have to present things on a projector while other times the customer only has 5Ghz wifi available. And thanks to the proprietary nature of these machines, these features are either non-functional or sub-optimal under Linux. I’m also getting tired of our IT staff telling me Linux isn’t supported whenever I have an issue, even if that issue clearly doesn’t have anything to do with the OS. And several other minor annoyances that have added up over my three yrs tenure here.&lt;/p&gt;

&lt;p&gt;So, yeah. I’ve decided to sign up for the pain of staying in OSX. So far, I think I’ve managed to coerce the system into a ‘feel-alike’ of my prior KDE 5 Plasma environment but it’s taken a lot of tweaking and Googling and setting of magic CLI commands to get OSX to do my bidding. And I’ve had to buy more than a few apps to get functionality that I got for free on Linux, which chaps my ass.&lt;/p&gt;

&lt;p&gt;So we’ll see how this lasts. Or doesn’t.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="work" /><category term="computers" /><category term="osx" /><category term="linux" /><summary type="html">I recently got a new Macbook Pro from work as my old one was having keyboard issues and since it was 3+ yrs old they deemed it not worth fixing. As you probably know, I spent a lot of time and effort on the previous mbp to get Gentoo up and running on it. I chose not to do so with this one.</summary></entry></feed>