<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="/feed/by_tag/linux.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-07-19T14:30:36-04:00</updated><id>/feed/by_tag/linux.xml</id><title type="html">Douglas J Hunley</title><subtitle>It's not that I'm anti-social; I'm just not user-friendly</subtitle><entry><title type="html">Bye Pi Hello NUC</title><link href="/posts/Bye-Pi-Hello-NUC/" rel="alternate" type="text/html" title="Bye Pi Hello NUC" /><published>2020-07-19T08:14:03-04:00</published><updated>2020-07-19T08:14:03-04:00</updated><id>/posts/Bye-Pi-Hello-NUC</id><content type="html" xml:base="/posts/Bye-Pi-Hello-NUC/">&lt;p&gt;About a year ago (Sep 2019 to be precise) I decided to end my Raspberry Pi experiment and begin  a new experiment with an Intel NUC. It’s not that the Pi is incapable or anything. I really like the platform and will probably find something else to use it for. But my computing needs/desires had changed and I was looking at having a small fleet of them (I already had 2 and was contemplating more) and I really didn’t want to go that route. So I looked around, did some research, saved up some money and ended up with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/intel_nuc_8.jpg&quot; class=&quot;lleader&quot; /&gt;An Intel NUC 8 Performance-G Kit. \  This is a Core i7-based kit (NUC8i7HVK) that just needs RAM and storage added. It’s a Radeon RX Vega M GH 32GB video card, an 802.11{a,b,g,n} device, 2x Gb Ethernet, 2x USB 2.0 ports, 5x USB 3.0 ports. 2x HDMI ports, 2x mini-Display ports, 2x Thunderbolt 3 ports, and a Bluetooth 4.2 radio. All inside a 6.4 lb 10.8”x7.8”x4.8” case. I fricking love it.&lt;/p&gt;

&lt;p&gt;I put a pair of HyperX Kingston Technology Impact 16GB 2400MHz DDR4 sticks in it after talking myself down from a pair of 32GB sticks.&lt;/p&gt;

&lt;p&gt;And finally, I put in a pair of Samsung 970 PRO SSD 1TB M.2 NVMe SSDs (OK, that’s a lie. I went with just one initially, but bought a second one like a month later).&lt;/p&gt;

&lt;p&gt;Given the nature of the beast I’d assembled, I started with &lt;a href=&quot;https://clearlinux.org/&quot;&gt;ClearLinux&lt;/a&gt; as my OS. It’s &lt;strong&gt;stupid fast&lt;/strong&gt;. And it’s neat and interesting in that ‘not like other girls’ kinda way. Ultimately though, I ended up ditching it due to the state of packaging. I’ve read that they have some new packaging initiatives though so you shouldn’t rule it out based on my experience last year. I then move to Ubuntu LTS for a short while, realized my mistake, and am currently on Ubuntu Server. So far, it’s doing what I need it to do but, protip:&lt;/p&gt;

&lt;p&gt;Make sure you google ‘how to X on ubuntu server’&lt;/p&gt;

&lt;p&gt;If you just Google ‘how to X ubuntu’ then a lot of the time what you find won’t apply. Networking, for example, using something called &lt;a href=&quot;https://netplan.io/&quot;&gt;netplan&lt;/a&gt; which is nothing ike regular Ubuntu desktop networking.&lt;/p&gt;

&lt;p&gt;Anyway, that’s all for now. I just wante to post this as background info cause I plan on posting about my travails w/ the Ubuntu Server as I go forward.&lt;/p&gt;</content><author><name></name></author><category term="computers" /><category term="linux" /><summary type="html">About a year ago (Sep 2019 to be precise) I decided to end my Raspberry Pi experiment and begin a new experiment with an Intel NUC. It’s not that the Pi is incapable or anything. I really like the platform and will probably find something else to use it for. But my computing needs/desires had changed and I was looking at having a small fleet of them (I already had 2 and was contemplating more) and I really didn’t want to go that route. So I looked around, did some research, saved up some money and ended up with:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/%7B%22feature%22=%3E%22tech.jpg%22%7D" /><media:content medium="image" url="/%7B%22feature%22=%3E%22tech.jpg%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">tuned, PG, and you</title><link href="/posts/tuned-PG-and-you/" rel="alternate" type="text/html" title="tuned, PG, and you" /><published>2020-06-23T14:22:44-04:00</published><updated>2020-06-23T14:22:44-04:00</updated><id>/posts/tuned-PG-and-you</id><content type="html" xml:base="/posts/tuned-PG-and-you/">&lt;p&gt;We’ve had a small flurry of customers asking about tuning their OS for the best PostgreSQL performance. While the answer to this question is always ‘that depends on your hardware and workload’ and involves a lot of iteration between changing a setting and benchmarking, I thought I’d take a moment to point out that once you do manage to dial-in the settings, you should be writing a profile and deploying to your systems for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuned&lt;/code&gt; to make use of. Please, for the love of $diety, stop editing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysctl.conf&lt;/code&gt; and friends!&lt;/p&gt;

&lt;p&gt;If you’re running RedHat (or a RedHat-derived) OS, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuned&lt;/code&gt; is probably already installed and may even be already running. If not, it’s a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum install tuned&lt;/code&gt; to rectify. If you’re on Debian (or a Debian-derived) OS, simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install tuned&lt;/code&gt;. Now that you have it installed, you can ask it to recommend a profile for you by issuing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuned-adm recommend&lt;/code&gt; and you can see which profile, if any, is in use by issuing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuned-adm active&lt;/code&gt;. You can also list all the available profiles with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuned-adm list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s great and all, but there’s no PostgreSQL profile that ships with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuned&lt;/code&gt;. So, let’s build one! First, decide which of the profiles in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuned-adm list&lt;/code&gt; is the most appropriate starting point for you. If you’re running on bare metal, this is probably &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throughput-performance&lt;/code&gt;. If your system is virtualized, you probably want &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtual-guest&lt;/code&gt;. We’re going to use this profile as the ‘base’ of our profile. Profiles are stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/tuned&lt;/code&gt;, so let’s start setting ours up:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /etc/tuned/postgresql
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/tuned/postgresql/tuned.conf
[main]
include= throughput-performance
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;
EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, we’re going to start with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throughput-performance&lt;/code&gt; profile as a base, and then make tweaks from there. The first tweak? Disable Transparent Huge Pages (THP):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/tuned/postgresql/tuned.conf
[vm]
transparent_hugepages=never
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re not aware, THP on a dedicated PostgreSQL server really don’t play nicely. It’s best to avoid them completely.&lt;/p&gt;

&lt;p&gt;Now, we want to set the ‘standard database VM config’ so we:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/tuned/postgresql/tuned.conf

[sysctl]
vm.overcommit_memory = 2
vm.swappiness = 1
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As pointed out in the comments, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vm.overcommit_memory&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vm.dirty_ratio&lt;/code&gt; (which I set below) interplay. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vm.dirty_ratio&lt;/code&gt; is the value that represents the percentage of MemTotal that can consume dirty pages before all processes must write dirty buffers back to disk and when this value is reached all I/O is blocked for any new writes until dirty pages have been flushed. By default this set to 50% which means that at most only &lt;strong&gt;half&lt;/strong&gt; of your MemTotal can ever only be dirty at once. Please see &lt;a href=&quot;https://www.kernel.org/doc/Documentation/vm/overcommit-accounting&quot;&gt;the kernel documentation&lt;/a&gt; for details on all these settings.&lt;/p&gt;

&lt;p&gt;I, personally, also then add (after benchmarking, of course):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/tuned/postgresql/tuned.conf
kernel.sched_autogroup_enabled = 0
kernel.sched_migration_cost_ns = 50000000
vm.dirty_background_bytes = 134217728
vm.dirty_expire_centisecs = 499
vm.dirty_ratio = 90
vm.overcommit_ratio = 90
vm.zone_reclaim_mode = 0
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives you a complete PostgreSQL tuned profile that looks like:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;]
&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;= &lt;span class=&quot;n&quot;&gt;throughput&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;performance&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;sysctl&lt;/span&gt;]
&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sched_autogroup_enabled&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sched_migration_cost_ns&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;50000000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;dirty_background_bytes&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;134217728&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;dirty_expire_centisecs&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;499&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;dirty_ratio&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;overcommit_memory&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;overcommit_ratio&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;swappiness&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;zone_reclaim_mode&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;]
&lt;span class=&quot;n&quot;&gt;transparent_hugepages&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(well, in a slightly different order, but you get the drift).&lt;/p&gt;

&lt;p&gt;Now that we have our profile, run a quick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuned-adm list&lt;/code&gt; to ensure that it is listed as available. Assuming it is, you can enable it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tune-adm profile postgresql&lt;/code&gt; and then double-check that it took effect with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tune-adm active&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once activated, you should be all set. Happy computing, or something. ;)&lt;/p&gt;</content><author><name></name></author><category term="postgresql" /><category term="linux" /><summary type="html">We’ve had a small flurry of customers asking about tuning their OS for the best PostgreSQL performance. While the answer to this question is always ‘that depends on your hardware and workload’ and involves a lot of iteration between changing a setting and benchmarking, I thought I’d take a moment to point out that once you do manage to dial-in the settings, you should be writing a profile and deploying to your systems for tuned to make use of. Please, for the love of $diety, stop editing sysctl.conf and friends!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/%7B%22feature%22=%3E%22db.jpg%22%7D" /><media:content medium="image" url="/%7B%22feature%22=%3E%22db.jpg%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Glutton for Punishment</title><link href="/posts/Glutton-for-punishment/" rel="alternate" type="text/html" title="Glutton for Punishment" /><published>2016-02-29T05:14:50-05:00</published><updated>2016-02-29T05:14:50-05:00</updated><id>/posts/Glutton-for-punishment</id><content type="html" xml:base="/posts/Glutton-for-punishment/">&lt;p&gt;&lt;img src=&quot;http://www.theshell.guru/wp-content/uploads/2015/12/osx-logo3.png&quot; class=&quot;rleader&quot; /&gt;I recently got a new Macbook Pro from work as my old one was having keyboard issues and since it was 3+ yrs old they deemed it not worth fixing. As you probably know, I spent a lot of time and effort on the previous mbp to get &lt;a href=&quot;http://www.gentoo.org&quot;&gt;Gentoo&lt;/a&gt; up and running on it. I chose &lt;em&gt;not&lt;/em&gt; to do so with this one.&lt;/p&gt;

&lt;p&gt;While I have looked into it and believe that I could get Gentoo up and running fairly easily, I’ve decided to skip it for now and try to live with OSX. I travel for work and never know what I’m going to be asked to do when onsite. Sometimes I have to present things on a projector while other times the customer only has 5Ghz wifi available. And thanks to the proprietary nature of these machines, these features are either non-functional or sub-optimal under Linux. I’m also getting tired of our IT staff telling me Linux isn’t supported whenever I have an issue, even if that issue clearly doesn’t have anything to do with the OS. And several other minor annoyances that have added up over my three yrs tenure here.&lt;/p&gt;

&lt;p&gt;So, yeah. I’ve decided to sign up for the pain of staying in OSX. So far, I think I’ve managed to coerce the system into a ‘feel-alike’ of my prior KDE 5 Plasma environment but it’s taken a lot of tweaking and Googling and setting of magic CLI commands to get OSX to do my bidding. And I’ve had to buy more than a few apps to get functionality that I got for free on Linux, which chaps my ass.&lt;/p&gt;

&lt;p&gt;So we’ll see how this lasts. Or doesn’t.&lt;/p&gt;</content><author><name></name></author><category term="work" /><category term="computers" /><category term="osx" /><category term="linux" /><summary type="html">I recently got a new Macbook Pro from work as my old one was having keyboard issues and since it was 3+ yrs old they deemed it not worth fixing. As you probably know, I spent a lot of time and effort on the previous mbp to get Gentoo up and running on it. I chose not to do so with this one.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/%7B%22feature%22=%3E%22tech.jpg%22%7D" /><media:content medium="image" url="/%7B%22feature%22=%3E%22tech.jpg%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>