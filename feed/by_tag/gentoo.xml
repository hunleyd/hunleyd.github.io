<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed/by_tag/gentoo.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-08-25T16:27:39-04:00</updated><id>/feed/by_tag/gentoo.xml</id><title type="html">Doug’s Dabblings</title><subtitle>A collection of thoughts on things in my life that I&apos;m experiencing, playing with, or suffering through. Mostly tech related, but sometimes not.</subtitle><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><entry><title type="html">Ricing it up</title><link href="/2021/07/31/Ricing-it-up/" rel="alternate" type="text/html" title="Ricing it up" /><published>2021-07-31T05:12:54-04:00</published><updated>2021-07-31T05:12:54-04:00</updated><id>/2021/07/31/Ricing-it-up</id><content type="html" xml:base="/2021/07/31/Ricing-it-up/">&lt;p&gt;One of the reasons that I find myself going back to Gentoo is that you compile the entire system &lt;em&gt;for your hardware&lt;/em&gt; which, in theory, leads to the best performance possible. So the first task that I undertook when switching the NUC over to it was to figure out what compile options ClearLinux uses. Once I had figured those settings out, I then decided to use LTO optimization for all packages that support it. However, I didn’t want to use the &lt;a href=&quot;https://github.com/gentoo-mirror/lto-overlay&quot;&gt;LTO overlay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After doing a lot of digging around and some experimentation, I finally
settled on the following configuration:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/make.conf
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-march=skylake -mtune=skylake -O3 -pipe -w -falign-functions=32&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -fgraphite-identity -floop-nest-optimize -floop-parallelize-all&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -flto=auto -flto-partition=one -fuse-linker-plugin&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHOST&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;x86_64-pc-linux-gnu&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CPU_FLAGS_X86&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt rdrand sse sse2 sse3 sse4_1 sse4_2 ssse3&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CXXFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS}&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LDFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-Wl,-O3 -Wl,--sort-common -Wl,--as-needed&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I start with a base CFLAGS, then I add Graphite optimizations,
and finally the LTO optimizations are added. Occasionally, LTO will cause
undefined symbols and the build will fails, so for that I have:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/env/cflags-ffat-lto-objects
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -ffat-lto-objects&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And occasionally a package just won’t compile with LTO, so that I use:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/portage/env/cflags-fno-lto
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;-march=skylake -mtune=skylake -O3 -pipe -w -falign-functions=32&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFLAGS&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS} -fgraphite-identity -floop-nest-optimize -floop-parallelize-all&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CXXFLAGS&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;${CFLAGS}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever I run into a package that has compile issues, I simply create a file
for it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/portage/package.env&lt;/code&gt; that looks like:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package_atom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cflags&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;ffat&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;lto&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package_atom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cflags&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;fno&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;lto&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This little setup has, so far, worked like a charm for me. Out of the 63
packages in my world file, only 12 need an env file to compile properly on my
~amd64 install. And everything feels snappy during my day to day. I’m quite
pleased.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="linux" /><category term="gentoo" /><category term="technology" /><summary type="html">One of the reasons that I find myself going back to Gentoo is that you compile the entire system for your hardware which, in theory, leads to the best performance possible. So the first task that I undertook when switching the NUC over to it was to figure out what compile options ClearLinux uses. Once I had figured those settings out, I then decided to use LTO optimization for all packages that support it. However, I didn’t want to use the LTO overlay.</summary></entry><entry><title type="html">Hello again old friend</title><link href="/2021/07/24/Hello-again-old-friend/" rel="alternate" type="text/html" title="Hello again old friend" /><published>2021-07-24T06:04:49-04:00</published><updated>2021-07-24T06:04:49-04:00</updated><id>/2021/07/24/Hello-again-old-friend</id><content type="html" xml:base="/2021/07/24/Hello-again-old-friend/">&lt;p&gt;I &lt;a href=&quot;/posts/Bye-Pi-Hello-NUC&quot;&gt;posted&lt;/a&gt; a year ago about dropping ClearLinux and
switching to Ubuntu Server on my NUC. While that little experiment was fun, it
didn’t last long. I’m not entirely sure what it is about my brain/personality, but
I just do not like any of the binary Linux distros out there for my own long-term use so I went back to my old friend, Gentoo.&lt;/p&gt;

&lt;p&gt;It’s been a few months now, and I must say that running Gentoo on the NUC has
been a pleasant experience. It took a little work to get up to speed on recent
changes in Gentoo, and I had to dig into things to get an optimized install
going on the NUC, but I’m pretty happy with the results.&lt;/p&gt;

&lt;p&gt;Maybe I’ll actually blog more this time about what I’m doing with this
install. Or maybe I’ll lapse back into old habits and forget to. Only time
will tell.&lt;/p&gt;</content><author><name>Douglas J Hunley</name><email>doug.hunley@gmail.com</email></author><category term="computers" /><category term="linux" /><category term="gentoo" /><summary type="html">I posted a year ago about dropping ClearLinux and switching to Ubuntu Server on my NUC. While that little experiment was fun, it didn’t last long. I’m not entirely sure what it is about my brain/personality, but I just do not like any of the binary Linux distros out there for my own long-term use so I went back to my old friend, Gentoo.</summary></entry></feed>